// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"context"
	"gitee.com/flycash/notification-platform/internal/api/grpc"
	"gitee.com/flycash/notification-platform/internal/domain"
	"gitee.com/flycash/notification-platform/internal/ioc"
	"gitee.com/flycash/notification-platform/internal/repository"
	"gitee.com/flycash/notification-platform/internal/repository/cache/local"
	"gitee.com/flycash/notification-platform/internal/repository/cache/redis"
	"gitee.com/flycash/notification-platform/internal/repository/dao"
	"gitee.com/flycash/notification-platform/internal/service/audit"
	"gitee.com/flycash/notification-platform/internal/service/channel"
	"gitee.com/flycash/notification-platform/internal/service/config"
	"gitee.com/flycash/notification-platform/internal/service/notification"
	"gitee.com/flycash/notification-platform/internal/service/notification/callback"
	"gitee.com/flycash/notification-platform/internal/service/provider"
	"gitee.com/flycash/notification-platform/internal/service/provider/manage"
	"gitee.com/flycash/notification-platform/internal/service/provider/sequential"
	"gitee.com/flycash/notification-platform/internal/service/provider/sms"
	"gitee.com/flycash/notification-platform/internal/service/provider/sms/client"
	"gitee.com/flycash/notification-platform/internal/service/provider/tracing"
	"gitee.com/flycash/notification-platform/internal/service/sender"
	"gitee.com/flycash/notification-platform/internal/service/sendstrategy"
	manage2 "gitee.com/flycash/notification-platform/internal/service/template/manage"
	"github.com/google/wire"
	"time"
)

// Injectors from wire.go:

func InitGrpcServer() *ioc.App {
	v := ioc.InitDB()
	notificationDAO := dao.NewNotificationDAO(v)
	notificationRepository := repository.NewNotificationRepository(notificationDAO)
	sonyflake := ioc.InitIDGenerator()
	service := notification.NewNotificationService(notificationRepository, sonyflake)
	channelTemplateDAO := dao.NewChannelTemplateDAO(v)
	channelTemplateRepository := repository.NewChannelTemplateRepository(channelTemplateDAO)
	string2 := ioc.InitProviderEncryptKey()
	providerDAO := dao.NewProviderDAO(v, string2)
	providerRepository := repository.NewProviderRepository(providerDAO)
	manageService := manage.NewProviderService(providerRepository)
	auditService := audit.NewService()
	channelTemplateService := manage2.NewChannelTemplateService(channelTemplateRepository, manageService, auditService)
	businessConfigDAO := dao.NewBusinessConfigDAO(v)
	client := ioc.InitRedisClient()
	cache := ioc.InitGoCache()
	localCache := local.NewLocalCache(client, cache)
	redisCache := redis.NewCache(client)
	businessConfigRepository := repository.NewBusinessConfigRepository(businessConfigDAO, localCache, redisCache)
	businessConfigService := config.NewBusinessConfigService(businessConfigRepository)
	callbackLogDAO := dao.NewCallbackLogDAO(v)
	callbackLogRepository := repository.NewCallbackLogRepository(notificationRepository, callbackLogDAO)
	callbackService := callback.NewService(businessConfigService, callbackLogRepository)
	channel := newChannel(manageService, channelTemplateService)
	notificationSender := sender.NewSender(notificationRepository, businessConfigService, callbackService, channel)
	immediateSendStrategy := sendstrategy.NewImmediateStrategy(notificationRepository, notificationSender)
	defaultSendStrategy := sendstrategy.NewDefaultStrategy(notificationRepository, businessConfigService)
	sendStrategy := sendstrategy.NewDispatcher(immediateSendStrategy, defaultSendStrategy)
	sendService := notification.NewSendService(channelTemplateService, service, sonyflake, sendStrategy)
	txNotificationDAO := dao.NewTxNotificationDAO(v)
	txNotificationRepository := repository.NewTxNotificationRepository(txNotificationDAO)
	dlockClient := ioc.InitDistributedLock(client)
	txNotificationService := notification.NewTxNotificationService(txNotificationRepository, businessConfigService, notificationRepository, dlockClient)
	notificationServer := grpc.NewServer(service, sendService, txNotificationService)
	configServer := grpc.NewConfigServer(businessConfigService)
	component := ioc.InitEtcdClient()
	egrpcComponent := ioc.InitGrpc(notificationServer, configServer, component)
	app := &ioc.App{
		GrpcServer: egrpcComponent,
	}
	return app
}

// wire.go:

var (
	BaseSet              = wire.NewSet(ioc.InitDB, ioc.InitDistributedLock, ioc.InitEtcdClient, ioc.InitIDGenerator, ioc.InitRedisClient, ioc.InitGoCache, local.NewLocalCache, redis.NewCache)
	configSvcSet         = wire.NewSet(config.NewBusinessConfigService, repository.NewBusinessConfigRepository, dao.NewBusinessConfigDAO)
	notificationSvcSet   = wire.NewSet(notification.NewNotificationService, repository.NewNotificationRepository, dao.NewNotificationDAO)
	txNotificationSvcSet = wire.NewSet(notification.NewTxNotificationService, repository.NewTxNotificationRepository, dao.NewTxNotificationDAO)
	senderSvcSet         = wire.NewSet(
		newChannel, sender.NewSender,
	)
	sendNotificationSvcSet = wire.NewSet(notification.NewSendService, sendstrategy.NewDispatcher, sendstrategy.NewImmediateStrategy, sendstrategy.NewDefaultStrategy)
	callbackSvcSet         = wire.NewSet(callback.NewService, repository.NewCallbackLogRepository, dao.NewCallbackLogDAO)
	providerSvcSet         = wire.NewSet(manage.NewProviderService, repository.NewProviderRepository, dao.NewProviderDAO, ioc.InitProviderEncryptKey)
	templateSvcSet         = wire.NewSet(manage2.NewChannelTemplateService, repository.NewChannelTemplateRepository, dao.NewChannelTemplateDAO)
)

func newChannel(
	providerSvc manage.Service,
	templateSvc manage2.ChannelTemplateService,
) channel.Channel {
	return channel.NewDispatcher(map[domain.Channel]channel.Channel{domain.ChannelEmail: channel.NewSMSChannel(newSMSSelectorBuilder(providerSvc, templateSvc))})
}

func newSMSSelectorBuilder(
	providerSvc manage.Service,
	templateSvc manage2.ChannelTemplateService,
) *sequential.SelectorBuilder {
	ctx, cancelFunc := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancelFunc()

	entities, err := providerSvc.GetProvidersByChannel(ctx, domain.ChannelSMS)
	if err != nil {
		panic(err)
	}

	providers := make([]provider.Provider, 0, len(entities))
	for i := range entities {
		var cli client.Client
		if entities[i].Name == "aliyun" {
			c, err1 := client.NewAliyunSMS(entities[i].RegionID, entities[i].APIKey, entities[i].APISecret)
			if err1 != nil {
				panic(err1)
			}
			cli = c
		} else if entities[i].Name == "gitee" {
			c, err1 := client.NewTencentCloudSMS(entities[i].RegionID, entities[i].APIKey, entities[i].APISecret, entities[i].APPID)
			if err1 != nil {
				panic(err1)
			}
			cli = c
		}
		providers = append(providers, sms.NewSMSProvider(
			entities[i].Name,
			templateSvc,
			cli,
		))
	}
	return sequential.NewSelectorBuilder(providers)
}

func newMockSMSSelectorBuilder(providerSvc manage.Service,
	templateSvc manage2.ChannelTemplateService) *sequential.SelectorBuilder {
	return sequential.NewSelectorBuilder([]provider.Provider{tracing.NewProvider(provider.NewMockProvider())})
}
