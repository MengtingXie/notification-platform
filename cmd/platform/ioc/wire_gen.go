// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"gitee.com/flycash/notification-platform/internal/api/grpc"
	"gitee.com/flycash/notification-platform/internal/service/audit"
	"gitee.com/flycash/notification-platform/internal/service/backup/internal/executor"
	"gitee.com/flycash/notification-platform/internal/service/backup/internal/template"
	"gitee.com/flycash/notification-platform/internal/service/config"
	"gitee.com/flycash/notification-platform/internal/service/notification"
	"gitee.com/flycash/notification-platform/internal/service/provider"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitGrpcServer() *App {
	sonyflake := InitIDGenerator()
	v := InitDB()
	module := notification.InitModule(v, sonyflake)
	service := module.Svc
	configModule := config.InitService(v)
	configService := configModule.Svc
	string2 := InitProviderEncryptKey()
	providerModule := provider.InitModule(v, string2)
	providerService := providerModule.Svc
	auditModule := audit.InitMoudle()
	auditService := auditModule.Svc
	templateModule := template.InitModule(v, providerService, auditService)
	templateService := templateModule.Svc
	v2 := InitSmsClients()
	executorModule := executor.InitModule(sonyflake, service, configService, providerService, templateService, v2)
	v3 := executorModule.Svc
	cmdable := InitRedis()
	txnotificationModule := txnotification.txnotification.InitModule(v, cmdable, service, configService)
	v4 := txnotificationModule.Svc
	notificationServer := grpc.NewServer(v3, v4)
	component := InitEtcdClient()
	egrpcComponent := InitGrpc(notificationServer, component)
	app := &App{
		GrpcServer: egrpcComponent,
	}
	return app
}

// wire.go:

var BaseSet = wire.NewSet(InitDB, InitRedis, InitEtcdClient, InitIDGenerator)
