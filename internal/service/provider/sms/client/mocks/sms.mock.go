// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go
//
// Generated by this command:
//
//	mockgen -source=./types.go -destination=./mocks/sms.mock.go -package=smsmocks -typed Client
//
// Package smsmocks is a generated GoMock package.
package smsmocks

import (
	reflect "reflect"

	client "gitee.com/flycash/notification-platform/internal/service/provider/sms/client"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateTemplate mocks base method.
func (m *MockClient) CreateTemplate(req client.CreateTemplateReq) (client.CreateTemplateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplate", req)
	ret0, _ := ret[0].(client.CreateTemplateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplate indicates an expected call of CreateTemplate.
func (mr *MockClientMockRecorder) CreateTemplate(req any) *ClientCreateTemplateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockClient)(nil).CreateTemplate), req)
	return &ClientCreateTemplateCall{Call: call}
}

// ClientCreateTemplateCall wrap *gomock.Call
type ClientCreateTemplateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientCreateTemplateCall) Return(arg0 client.CreateTemplateResp, arg1 error) *ClientCreateTemplateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientCreateTemplateCall) Do(f func(client.CreateTemplateReq) (client.CreateTemplateResp, error)) *ClientCreateTemplateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientCreateTemplateCall) DoAndReturn(f func(client.CreateTemplateReq) (client.CreateTemplateResp, error)) *ClientCreateTemplateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryTemplateStatus mocks base method.
func (m *MockClient) QueryTemplateStatus(req client.QueryTemplateStatusReq) (client.QueryTemplateStatusResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTemplateStatus", req)
	ret0, _ := ret[0].(client.QueryTemplateStatusResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTemplateStatus indicates an expected call of QueryTemplateStatus.
func (mr *MockClientMockRecorder) QueryTemplateStatus(req any) *ClientQueryTemplateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTemplateStatus", reflect.TypeOf((*MockClient)(nil).QueryTemplateStatus), req)
	return &ClientQueryTemplateStatusCall{Call: call}
}

// ClientQueryTemplateStatusCall wrap *gomock.Call
type ClientQueryTemplateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientQueryTemplateStatusCall) Return(arg0 client.QueryTemplateStatusResp, arg1 error) *ClientQueryTemplateStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientQueryTemplateStatusCall) Do(f func(client.QueryTemplateStatusReq) (client.QueryTemplateStatusResp, error)) *ClientQueryTemplateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientQueryTemplateStatusCall) DoAndReturn(f func(client.QueryTemplateStatusReq) (client.QueryTemplateStatusResp, error)) *ClientQueryTemplateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Send mocks base method.
func (m *MockClient) Send(req client.SendReq) (client.SendResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", req)
	ret0, _ := ret[0].(client.SendResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockClientMockRecorder) Send(req any) *ClientSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClient)(nil).Send), req)
	return &ClientSendCall{Call: call}
}

// ClientSendCall wrap *gomock.Call
type ClientSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientSendCall) Return(arg0 client.SendResp, arg1 error) *ClientSendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientSendCall) Do(f func(client.SendReq) (client.SendResp, error)) *ClientSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientSendCall) DoAndReturn(f func(client.SendReq) (client.SendResp, error)) *ClientSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
