// Code generated by MockGen. DO NOT EDIT.
// Source: ./provider.go
//
// Generated by this command:
//
//	mockgen -source=./provider.go -destination=../../mocks/provider.mock.go -package=providermocks -typed ProviderService
//

// Package providermocks is a generated GoMock package.
package providermocks

import (
	context "context"
	reflect "reflect"

	"gitee.com/flycash/notification-platform/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockProviderService is a mock of ProviderService interface.
type MockProviderService struct {
	ctrl     *gomock.Controller
	recorder *MockProviderServiceMockRecorder
	isgomock struct{}
}

// MockProviderServiceMockRecorder is the mock recorder for MockProviderService.
type MockProviderServiceMockRecorder struct {
	mock *MockProviderService
}

// NewMockProviderService creates a new mock instance.
func NewMockProviderService(ctrl *gomock.Controller) *MockProviderService {
	mock := &MockProviderService{ctrl: ctrl}
	mock.recorder = &MockProviderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderService) EXPECT() *MockProviderServiceMockRecorder {
	return m.recorder
}

// CreateProvider mocks base method.
func (m *MockProviderService) CreateProvider(ctx context.Context, provider domain.Provider) (domain.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProvider", ctx, provider)
	ret0, _ := ret[0].(domain.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProvider indicates an expected call of CreateProvider.
func (mr *MockProviderServiceMockRecorder) CreateProvider(ctx, provider any) *MockProviderServiceCreateProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvider", reflect.TypeOf((*MockProviderService)(nil).CreateProvider), ctx, provider)
	return &MockProviderServiceCreateProviderCall{Call: call}
}

// MockProviderServiceCreateProviderCall wrap *gomock.Call
type MockProviderServiceCreateProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderServiceCreateProviderCall) Return(arg0 domain.Provider, arg1 error) *MockProviderServiceCreateProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderServiceCreateProviderCall) Do(f func(context.Context, domain.Provider) (domain.Provider, error)) *MockProviderServiceCreateProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderServiceCreateProviderCall) DoAndReturn(f func(context.Context, domain.Provider) (domain.Provider, error)) *MockProviderServiceCreateProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProviderByID mocks base method.
func (m *MockProviderService) GetProviderByID(ctx context.Context, id int64) (domain.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderByID", ctx, id)
	ret0, _ := ret[0].(domain.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderByID indicates an expected call of GetProviderByID.
func (mr *MockProviderServiceMockRecorder) GetProviderByID(ctx, id any) *MockProviderServiceGetProviderByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderByID", reflect.TypeOf((*MockProviderService)(nil).GetProviderByID), ctx, id)
	return &MockProviderServiceGetProviderByIDCall{Call: call}
}

// MockProviderServiceGetProviderByIDCall wrap *gomock.Call
type MockProviderServiceGetProviderByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderServiceGetProviderByIDCall) Return(arg0 domain.Provider, arg1 error) *MockProviderServiceGetProviderByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderServiceGetProviderByIDCall) Do(f func(context.Context, int64) (domain.Provider, error)) *MockProviderServiceGetProviderByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderServiceGetProviderByIDCall) DoAndReturn(f func(context.Context, int64) (domain.Provider, error)) *MockProviderServiceGetProviderByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProviderIDByNameAndChannel mocks base method.
func (m *MockProviderService) GetProviderIDByNameAndChannel(ctx context.Context, name string, channel domain.Channel) (domain.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderIDByNameAndChannel", ctx, name, channel)
	ret0, _ := ret[0].(domain.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderIDByNameAndChannel indicates an expected call of GetProviderIDByNameAndChannel.
func (mr *MockProviderServiceMockRecorder) GetProviderIDByNameAndChannel(ctx, name, channel any) *MockProviderServiceGetProviderIDByNameAndChannelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderIDByNameAndChannel", reflect.TypeOf((*MockProviderService)(nil).GetProviderIDByNameAndChannel), ctx, name, channel)
	return &MockProviderServiceGetProviderIDByNameAndChannelCall{Call: call}
}

// MockProviderServiceGetProviderIDByNameAndChannelCall wrap *gomock.Call
type MockProviderServiceGetProviderIDByNameAndChannelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderServiceGetProviderIDByNameAndChannelCall) Return(arg0 domain.Provider, arg1 error) *MockProviderServiceGetProviderIDByNameAndChannelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderServiceGetProviderIDByNameAndChannelCall) Do(f func(context.Context, string, domain.Channel) (domain.Provider, error)) *MockProviderServiceGetProviderIDByNameAndChannelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderServiceGetProviderIDByNameAndChannelCall) DoAndReturn(f func(context.Context, string, domain.Channel) (domain.Provider, error)) *MockProviderServiceGetProviderIDByNameAndChannelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProvidersByChannel mocks base method.
func (m *MockProviderService) GetProvidersByChannel(ctx context.Context, channel domain.Channel) ([]domain.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvidersByChannel", ctx, channel)
	ret0, _ := ret[0].([]domain.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProvidersByChannel indicates an expected call of GetProvidersByChannel.
func (mr *MockProviderServiceMockRecorder) GetProvidersByChannel(ctx, channel any) *MockProviderServiceGetProvidersByChannelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvidersByChannel", reflect.TypeOf((*MockProviderService)(nil).GetProvidersByChannel), ctx, channel)
	return &MockProviderServiceGetProvidersByChannelCall{Call: call}
}

// MockProviderServiceGetProvidersByChannelCall wrap *gomock.Call
type MockProviderServiceGetProvidersByChannelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderServiceGetProvidersByChannelCall) Return(arg0 []domain.Provider, arg1 error) *MockProviderServiceGetProvidersByChannelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderServiceGetProvidersByChannelCall) Do(f func(context.Context, domain.Channel) ([]domain.Provider, error)) *MockProviderServiceGetProvidersByChannelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderServiceGetProvidersByChannelCall) DoAndReturn(f func(context.Context, domain.Channel) ([]domain.Provider, error)) *MockProviderServiceGetProvidersByChannelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateProvider mocks base method.
func (m *MockProviderService) UpdateProvider(ctx context.Context, provider domain.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProvider", ctx, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProvider indicates an expected call of UpdateProvider.
func (mr *MockProviderServiceMockRecorder) UpdateProvider(ctx, provider any) *MockProviderServiceUpdateProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvider", reflect.TypeOf((*MockProviderService)(nil).UpdateProvider), ctx, provider)
	return &MockProviderServiceUpdateProviderCall{Call: call}
}

// MockProviderServiceUpdateProviderCall wrap *gomock.Call
type MockProviderServiceUpdateProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderServiceUpdateProviderCall) Return(arg0 error) *MockProviderServiceUpdateProviderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderServiceUpdateProviderCall) Do(f func(context.Context, domain.Provider) error) *MockProviderServiceUpdateProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderServiceUpdateProviderCall) DoAndReturn(f func(context.Context, domain.Provider) error) *MockProviderServiceUpdateProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
