// Code generated by MockGen. DO NOT EDIT.
// Source: ./manage.go
//
// Generated by this command:
//
//	mockgen -source=./manage.go -destination=../mocks/manage.mock.go -package=providermocks -typed Service
//
// Package providermocks is a generated GoMock package.
package providermocks

import (
	context "context"
	reflect "reflect"

	domain "gitee.com/flycash/notification-platform/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateProvider mocks base method.
func (m *MockService) CreateProvider(ctx context.Context, provider domain.Provider) (domain.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProvider", ctx, provider)
	ret0, _ := ret[0].(domain.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProvider indicates an expected call of CreateProvider.
func (mr *MockServiceMockRecorder) CreateProvider(ctx, provider any) *ServiceCreateProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvider", reflect.TypeOf((*MockService)(nil).CreateProvider), ctx, provider)
	return &ServiceCreateProviderCall{Call: call}
}

// ServiceCreateProviderCall wrap *gomock.Call
type ServiceCreateProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceCreateProviderCall) Return(arg0 domain.Provider, arg1 error) *ServiceCreateProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceCreateProviderCall) Do(f func(context.Context, domain.Provider) (domain.Provider, error)) *ServiceCreateProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceCreateProviderCall) DoAndReturn(f func(context.Context, domain.Provider) (domain.Provider, error)) *ServiceCreateProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProviderByID mocks base method.
func (m *MockService) GetProviderByID(ctx context.Context, id int64) (domain.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderByID", ctx, id)
	ret0, _ := ret[0].(domain.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderByID indicates an expected call of GetProviderByID.
func (mr *MockServiceMockRecorder) GetProviderByID(ctx, id any) *ServiceGetProviderByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderByID", reflect.TypeOf((*MockService)(nil).GetProviderByID), ctx, id)
	return &ServiceGetProviderByIDCall{Call: call}
}

// ServiceGetProviderByIDCall wrap *gomock.Call
type ServiceGetProviderByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceGetProviderByIDCall) Return(arg0 domain.Provider, arg1 error) *ServiceGetProviderByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceGetProviderByIDCall) Do(f func(context.Context, int64) (domain.Provider, error)) *ServiceGetProviderByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceGetProviderByIDCall) DoAndReturn(f func(context.Context, int64) (domain.Provider, error)) *ServiceGetProviderByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProviderIDByNameAndChannel mocks base method.
func (m *MockService) GetProviderIDByNameAndChannel(ctx context.Context, name string, channel domain.Channel) (domain.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderIDByNameAndChannel", ctx, name, channel)
	ret0, _ := ret[0].(domain.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderIDByNameAndChannel indicates an expected call of GetProviderIDByNameAndChannel.
func (mr *MockServiceMockRecorder) GetProviderIDByNameAndChannel(ctx, name, channel any) *ServiceGetProviderIDByNameAndChannelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderIDByNameAndChannel", reflect.TypeOf((*MockService)(nil).GetProviderIDByNameAndChannel), ctx, name, channel)
	return &ServiceGetProviderIDByNameAndChannelCall{Call: call}
}

// ServiceGetProviderIDByNameAndChannelCall wrap *gomock.Call
type ServiceGetProviderIDByNameAndChannelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceGetProviderIDByNameAndChannelCall) Return(arg0 domain.Provider, arg1 error) *ServiceGetProviderIDByNameAndChannelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceGetProviderIDByNameAndChannelCall) Do(f func(context.Context, string, domain.Channel) (domain.Provider, error)) *ServiceGetProviderIDByNameAndChannelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceGetProviderIDByNameAndChannelCall) DoAndReturn(f func(context.Context, string, domain.Channel) (domain.Provider, error)) *ServiceGetProviderIDByNameAndChannelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProvidersByChannel mocks base method.
func (m *MockService) GetProvidersByChannel(ctx context.Context, channel domain.Channel) ([]domain.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvidersByChannel", ctx, channel)
	ret0, _ := ret[0].([]domain.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProvidersByChannel indicates an expected call of GetProvidersByChannel.
func (mr *MockServiceMockRecorder) GetProvidersByChannel(ctx, channel any) *ServiceGetProvidersByChannelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvidersByChannel", reflect.TypeOf((*MockService)(nil).GetProvidersByChannel), ctx, channel)
	return &ServiceGetProvidersByChannelCall{Call: call}
}

// ServiceGetProvidersByChannelCall wrap *gomock.Call
type ServiceGetProvidersByChannelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceGetProvidersByChannelCall) Return(arg0 []domain.Provider, arg1 error) *ServiceGetProvidersByChannelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceGetProvidersByChannelCall) Do(f func(context.Context, domain.Channel) ([]domain.Provider, error)) *ServiceGetProvidersByChannelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceGetProvidersByChannelCall) DoAndReturn(f func(context.Context, domain.Channel) ([]domain.Provider, error)) *ServiceGetProvidersByChannelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateProvider mocks base method.
func (m *MockService) UpdateProvider(ctx context.Context, provider domain.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProvider", ctx, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProvider indicates an expected call of UpdateProvider.
func (mr *MockServiceMockRecorder) UpdateProvider(ctx, provider any) *ServiceUpdateProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvider", reflect.TypeOf((*MockService)(nil).UpdateProvider), ctx, provider)
	return &ServiceUpdateProviderCall{Call: call}
}

// ServiceUpdateProviderCall wrap *gomock.Call
type ServiceUpdateProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceUpdateProviderCall) Return(arg0 error) *ServiceUpdateProviderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceUpdateProviderCall) Do(f func(context.Context, domain.Provider) error) *ServiceUpdateProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceUpdateProviderCall) DoAndReturn(f func(context.Context, domain.Provider) error) *ServiceUpdateProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
