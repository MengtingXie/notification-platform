// Code generated by MockGen. DO NOT EDIT.
// Source: ./manage.go
//
// Generated by this command:
//
//	mockgen -source=./manage.go -destination=../mocks/manage.mock.go -package=providermocks -typed Service
//

// Package providermocks is a generated GoMock package.
package providermocks

import (
	context "context"
	reflect "reflect"

	domain "gitee.com/flycash/notification-platform/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateProvider mocks base method.
func (m *MockService) CreateProvider(ctx context.Context, provider domain.Provider) (domain.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProvider", ctx, provider)
	ret0, _ := ret[0].(domain.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProvider indicates an expected call of CreateProvider.
func (mr *MockServiceMockRecorder) CreateProvider(ctx, provider any) *MockServiceCreateProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvider", reflect.TypeOf((*MockService)(nil).CreateProvider), ctx, provider)
	return &MockServiceCreateProviderCall{Call: call}
}

// MockServiceCreateProviderCall wrap *gomock.Call
type MockServiceCreateProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateProviderCall) Return(arg0 domain.Provider, arg1 error) *MockServiceCreateProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateProviderCall) Do(f func(context.Context, domain.Provider) (domain.Provider, error)) *MockServiceCreateProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateProviderCall) DoAndReturn(f func(context.Context, domain.Provider) (domain.Provider, error)) *MockServiceCreateProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProviderByID mocks base method.
func (m *MockService) GetProviderByID(ctx context.Context, id int64) (domain.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderByID", ctx, id)
	ret0, _ := ret[0].(domain.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderByID indicates an expected call of GetProviderByID.
func (mr *MockServiceMockRecorder) GetProviderByID(ctx, id any) *MockServiceGetProviderByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderByID", reflect.TypeOf((*MockService)(nil).GetProviderByID), ctx, id)
	return &MockServiceGetProviderByIDCall{Call: call}
}

// MockServiceGetProviderByIDCall wrap *gomock.Call
type MockServiceGetProviderByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetProviderByIDCall) Return(arg0 domain.Provider, arg1 error) *MockServiceGetProviderByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetProviderByIDCall) Do(f func(context.Context, int64) (domain.Provider, error)) *MockServiceGetProviderByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetProviderByIDCall) DoAndReturn(f func(context.Context, int64) (domain.Provider, error)) *MockServiceGetProviderByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProviderIDByNameAndChannel mocks base method.
func (m *MockService) GetProviderIDByNameAndChannel(ctx context.Context, name string, channel domain.Channel) (domain.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderIDByNameAndChannel", ctx, name, channel)
	ret0, _ := ret[0].(domain.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderIDByNameAndChannel indicates an expected call of GetProviderIDByNameAndChannel.
func (mr *MockServiceMockRecorder) GetProviderIDByNameAndChannel(ctx, name, channel any) *MockServiceGetProviderIDByNameAndChannelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderIDByNameAndChannel", reflect.TypeOf((*MockService)(nil).GetProviderIDByNameAndChannel), ctx, name, channel)
	return &MockServiceGetProviderIDByNameAndChannelCall{Call: call}
}

// MockServiceGetProviderIDByNameAndChannelCall wrap *gomock.Call
type MockServiceGetProviderIDByNameAndChannelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetProviderIDByNameAndChannelCall) Return(arg0 domain.Provider, arg1 error) *MockServiceGetProviderIDByNameAndChannelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetProviderIDByNameAndChannelCall) Do(f func(context.Context, string, domain.Channel) (domain.Provider, error)) *MockServiceGetProviderIDByNameAndChannelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetProviderIDByNameAndChannelCall) DoAndReturn(f func(context.Context, string, domain.Channel) (domain.Provider, error)) *MockServiceGetProviderIDByNameAndChannelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProvidersByChannel mocks base method.
func (m *MockService) GetProvidersByChannel(ctx context.Context, channel domain.Channel) ([]domain.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvidersByChannel", ctx, channel)
	ret0, _ := ret[0].([]domain.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProvidersByChannel indicates an expected call of GetProvidersByChannel.
func (mr *MockServiceMockRecorder) GetProvidersByChannel(ctx, channel any) *MockServiceGetProvidersByChannelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvidersByChannel", reflect.TypeOf((*MockService)(nil).GetProvidersByChannel), ctx, channel)
	return &MockServiceGetProvidersByChannelCall{Call: call}
}

// MockServiceGetProvidersByChannelCall wrap *gomock.Call
type MockServiceGetProvidersByChannelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetProvidersByChannelCall) Return(arg0 []domain.Provider, arg1 error) *MockServiceGetProvidersByChannelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetProvidersByChannelCall) Do(f func(context.Context, domain.Channel) ([]domain.Provider, error)) *MockServiceGetProvidersByChannelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetProvidersByChannelCall) DoAndReturn(f func(context.Context, domain.Channel) ([]domain.Provider, error)) *MockServiceGetProvidersByChannelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateProvider mocks base method.
func (m *MockService) UpdateProvider(ctx context.Context, provider domain.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProvider", ctx, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProvider indicates an expected call of UpdateProvider.
func (mr *MockServiceMockRecorder) UpdateProvider(ctx, provider any) *MockServiceUpdateProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvider", reflect.TypeOf((*MockService)(nil).UpdateProvider), ctx, provider)
	return &MockServiceUpdateProviderCall{Call: call}
}

// MockServiceUpdateProviderCall wrap *gomock.Call
type MockServiceUpdateProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateProviderCall) Return(arg0 error) *MockServiceUpdateProviderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateProviderCall) Do(f func(context.Context, domain.Provider) error) *MockServiceUpdateProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateProviderCall) DoAndReturn(f func(context.Context, domain.Provider) error) *MockServiceUpdateProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
