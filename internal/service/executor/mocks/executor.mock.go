// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go
//
// Generated by this command:
//
//	mockgen -source=./types.go -destination=../mocks/executor.mock.go -package=executormocks -typed ExecutorService
//

// Package executormocks is a generated GoMock package.
package executormocks

import (
	context "context"
	reflect "reflect"

	service "gitee.com/flycash/notification-platform/internal/service/executor/service"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutorService is a mock of ExecutorService interface.
type MockExecutorService struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorServiceMockRecorder
	isgomock struct{}
}

// MockExecutorServiceMockRecorder is the mock recorder for MockExecutorService.
type MockExecutorServiceMockRecorder struct {
	mock *MockExecutorService
}

// NewMockExecutorService creates a new mock instance.
func NewMockExecutorService(ctrl *gomock.Controller) *MockExecutorService {
	mock := &MockExecutorService{ctrl: ctrl}
	mock.recorder = &MockExecutorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutorService) EXPECT() *MockExecutorServiceMockRecorder {
	return m.recorder
}

// BatchQueryNotifications mocks base method.
func (m *MockExecutorService) BatchQueryNotifications(ctx context.Context, keys ...string) ([]service.SendResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchQueryNotifications", varargs...)
	ret0, _ := ret[0].([]service.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchQueryNotifications indicates an expected call of BatchQueryNotifications.
func (mr *MockExecutorServiceMockRecorder) BatchQueryNotifications(ctx any, keys ...any) *MockExecutorServiceBatchQueryNotificationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchQueryNotifications", reflect.TypeOf((*MockExecutorService)(nil).BatchQueryNotifications), varargs...)
	return &MockExecutorServiceBatchQueryNotificationsCall{Call: call}
}

// MockExecutorServiceBatchQueryNotificationsCall wrap *gomock.Call
type MockExecutorServiceBatchQueryNotificationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExecutorServiceBatchQueryNotificationsCall) Return(arg0 []service.SendResponse, arg1 error) *MockExecutorServiceBatchQueryNotificationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExecutorServiceBatchQueryNotificationsCall) Do(f func(context.Context, ...string) ([]service.SendResponse, error)) *MockExecutorServiceBatchQueryNotificationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExecutorServiceBatchQueryNotificationsCall) DoAndReturn(f func(context.Context, ...string) ([]service.SendResponse, error)) *MockExecutorServiceBatchQueryNotificationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BatchSendNotifications mocks base method.
func (m *MockExecutorService) BatchSendNotifications(ctx context.Context, ns ...service.Notification) (service.BatchSendResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range ns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchSendNotifications", varargs...)
	ret0, _ := ret[0].(service.BatchSendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSendNotifications indicates an expected call of BatchSendNotifications.
func (mr *MockExecutorServiceMockRecorder) BatchSendNotifications(ctx any, ns ...any) *MockExecutorServiceBatchSendNotificationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, ns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSendNotifications", reflect.TypeOf((*MockExecutorService)(nil).BatchSendNotifications), varargs...)
	return &MockExecutorServiceBatchSendNotificationsCall{Call: call}
}

// MockExecutorServiceBatchSendNotificationsCall wrap *gomock.Call
type MockExecutorServiceBatchSendNotificationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExecutorServiceBatchSendNotificationsCall) Return(arg0 service.BatchSendResponse, arg1 error) *MockExecutorServiceBatchSendNotificationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExecutorServiceBatchSendNotificationsCall) Do(f func(context.Context, ...service.Notification) (service.BatchSendResponse, error)) *MockExecutorServiceBatchSendNotificationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExecutorServiceBatchSendNotificationsCall) DoAndReturn(f func(context.Context, ...service.Notification) (service.BatchSendResponse, error)) *MockExecutorServiceBatchSendNotificationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BatchSendNotificationsAsync mocks base method.
func (m *MockExecutorService) BatchSendNotificationsAsync(ctx context.Context, ns ...service.Notification) (service.BatchSendAsyncResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range ns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchSendNotificationsAsync", varargs...)
	ret0, _ := ret[0].(service.BatchSendAsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSendNotificationsAsync indicates an expected call of BatchSendNotificationsAsync.
func (mr *MockExecutorServiceMockRecorder) BatchSendNotificationsAsync(ctx any, ns ...any) *MockExecutorServiceBatchSendNotificationsAsyncCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, ns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSendNotificationsAsync", reflect.TypeOf((*MockExecutorService)(nil).BatchSendNotificationsAsync), varargs...)
	return &MockExecutorServiceBatchSendNotificationsAsyncCall{Call: call}
}

// MockExecutorServiceBatchSendNotificationsAsyncCall wrap *gomock.Call
type MockExecutorServiceBatchSendNotificationsAsyncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExecutorServiceBatchSendNotificationsAsyncCall) Return(arg0 service.BatchSendAsyncResponse, arg1 error) *MockExecutorServiceBatchSendNotificationsAsyncCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExecutorServiceBatchSendNotificationsAsyncCall) Do(f func(context.Context, ...service.Notification) (service.BatchSendAsyncResponse, error)) *MockExecutorServiceBatchSendNotificationsAsyncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExecutorServiceBatchSendNotificationsAsyncCall) DoAndReturn(f func(context.Context, ...service.Notification) (service.BatchSendAsyncResponse, error)) *MockExecutorServiceBatchSendNotificationsAsyncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendNotification mocks base method.
func (m *MockExecutorService) SendNotification(ctx context.Context, n service.Notification) (service.SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", ctx, n)
	ret0, _ := ret[0].(service.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockExecutorServiceMockRecorder) SendNotification(ctx, n any) *MockExecutorServiceSendNotificationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockExecutorService)(nil).SendNotification), ctx, n)
	return &MockExecutorServiceSendNotificationCall{Call: call}
}

// MockExecutorServiceSendNotificationCall wrap *gomock.Call
type MockExecutorServiceSendNotificationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExecutorServiceSendNotificationCall) Return(arg0 service.SendResponse, arg1 error) *MockExecutorServiceSendNotificationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExecutorServiceSendNotificationCall) Do(f func(context.Context, service.Notification) (service.SendResponse, error)) *MockExecutorServiceSendNotificationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExecutorServiceSendNotificationCall) DoAndReturn(f func(context.Context, service.Notification) (service.SendResponse, error)) *MockExecutorServiceSendNotificationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendNotificationAsync mocks base method.
func (m *MockExecutorService) SendNotificationAsync(ctx context.Context, n service.Notification) (service.SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotificationAsync", ctx, n)
	ret0, _ := ret[0].(service.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotificationAsync indicates an expected call of SendNotificationAsync.
func (mr *MockExecutorServiceMockRecorder) SendNotificationAsync(ctx, n any) *MockExecutorServiceSendNotificationAsyncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotificationAsync", reflect.TypeOf((*MockExecutorService)(nil).SendNotificationAsync), ctx, n)
	return &MockExecutorServiceSendNotificationAsyncCall{Call: call}
}

// MockExecutorServiceSendNotificationAsyncCall wrap *gomock.Call
type MockExecutorServiceSendNotificationAsyncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExecutorServiceSendNotificationAsyncCall) Return(arg0 service.SendResponse, arg1 error) *MockExecutorServiceSendNotificationAsyncCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExecutorServiceSendNotificationAsyncCall) Do(f func(context.Context, service.Notification) (service.SendResponse, error)) *MockExecutorServiceSendNotificationAsyncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExecutorServiceSendNotificationAsyncCall) DoAndReturn(f func(context.Context, service.Notification) (service.SendResponse, error)) *MockExecutorServiceSendNotificationAsyncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
