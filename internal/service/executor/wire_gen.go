// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package executor

import (
	"gitee.com/flycash/notification-platform/internal/service/config"
	"gitee.com/flycash/notification-platform/internal/service/executor/internal/service"
	"gitee.com/flycash/notification-platform/internal/service/executor/internal/service/sender"
	"gitee.com/flycash/notification-platform/internal/service/executor/internal/service/strategy"
	"gitee.com/flycash/notification-platform/internal/service/notification"
	"gitee.com/flycash/notification-platform/internal/service/pkg/client/sms"
	"gitee.com/flycash/notification-platform/internal/service/provider"
	"gitee.com/flycash/notification-platform/internal/service/template"
	"github.com/sony/sonyflake"
)

// Injectors from wire.go:

func InitModule(idGenerator *sonyflake.Sonyflake, notificationSvc notification.Service, configSvc config.Service, providerSvc provider.Service, templateSvc template.Service, smsClients map[string]sms.Client) *Module {
	notificationSender := sender.NewSender(notificationSvc, configSvc, providerSvc, templateSvc, smsClients)
	sendStrategy := strategy.NewDispatcher(notificationSvc, notificationSender)
	executorService := service.NewExecutorService(notificationSvc, idGenerator, sendStrategy)
	module := &Module{
		Svc: executorService,
	}
	return module
}
