// Code generated by MockGen. DO NOT EDIT.
// Source: ./executor.go
//
// Generated by this command:
//
//	mockgen -source=./executor.go -destination=./mocks/executor.mock.go -package=notificationmocks -typed ExecutorService
//
// Package notificationmocks is a generated GoMock package.
package notificationmocks

import (
	context "context"
	reflect "reflect"

	domain "gitee.com/flycash/notification-platform/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutorService is a mock of ExecutorService interface.
type MockExecutorService struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorServiceMockRecorder
}

// MockExecutorServiceMockRecorder is the mock recorder for MockExecutorService.
type MockExecutorServiceMockRecorder struct {
	mock *MockExecutorService
}

// NewMockExecutorService creates a new mock instance.
func NewMockExecutorService(ctrl *gomock.Controller) *MockExecutorService {
	mock := &MockExecutorService{ctrl: ctrl}
	mock.recorder = &MockExecutorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutorService) EXPECT() *MockExecutorServiceMockRecorder {
	return m.recorder
}

// BatchSendNotifications mocks base method.
func (m *MockExecutorService) BatchSendNotifications(ctx context.Context, ns ...domain.Notification) (domain.BatchSendResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range ns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchSendNotifications", varargs...)
	ret0, _ := ret[0].(domain.BatchSendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSendNotifications indicates an expected call of BatchSendNotifications.
func (mr *MockExecutorServiceMockRecorder) BatchSendNotifications(ctx any, ns ...any) *ExecutorServiceBatchSendNotificationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, ns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSendNotifications", reflect.TypeOf((*MockExecutorService)(nil).BatchSendNotifications), varargs...)
	return &ExecutorServiceBatchSendNotificationsCall{Call: call}
}

// ExecutorServiceBatchSendNotificationsCall wrap *gomock.Call
type ExecutorServiceBatchSendNotificationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExecutorServiceBatchSendNotificationsCall) Return(arg0 domain.BatchSendResponse, arg1 error) *ExecutorServiceBatchSendNotificationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExecutorServiceBatchSendNotificationsCall) Do(f func(context.Context, ...domain.Notification) (domain.BatchSendResponse, error)) *ExecutorServiceBatchSendNotificationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExecutorServiceBatchSendNotificationsCall) DoAndReturn(f func(context.Context, ...domain.Notification) (domain.BatchSendResponse, error)) *ExecutorServiceBatchSendNotificationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BatchSendNotificationsAsync mocks base method.
func (m *MockExecutorService) BatchSendNotificationsAsync(ctx context.Context, ns ...domain.Notification) (domain.BatchSendAsyncResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range ns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchSendNotificationsAsync", varargs...)
	ret0, _ := ret[0].(domain.BatchSendAsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSendNotificationsAsync indicates an expected call of BatchSendNotificationsAsync.
func (mr *MockExecutorServiceMockRecorder) BatchSendNotificationsAsync(ctx any, ns ...any) *ExecutorServiceBatchSendNotificationsAsyncCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, ns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSendNotificationsAsync", reflect.TypeOf((*MockExecutorService)(nil).BatchSendNotificationsAsync), varargs...)
	return &ExecutorServiceBatchSendNotificationsAsyncCall{Call: call}
}

// ExecutorServiceBatchSendNotificationsAsyncCall wrap *gomock.Call
type ExecutorServiceBatchSendNotificationsAsyncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExecutorServiceBatchSendNotificationsAsyncCall) Return(arg0 domain.BatchSendAsyncResponse, arg1 error) *ExecutorServiceBatchSendNotificationsAsyncCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExecutorServiceBatchSendNotificationsAsyncCall) Do(f func(context.Context, ...domain.Notification) (domain.BatchSendAsyncResponse, error)) *ExecutorServiceBatchSendNotificationsAsyncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExecutorServiceBatchSendNotificationsAsyncCall) DoAndReturn(f func(context.Context, ...domain.Notification) (domain.BatchSendAsyncResponse, error)) *ExecutorServiceBatchSendNotificationsAsyncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendNotification mocks base method.
func (m *MockExecutorService) SendNotification(ctx context.Context, n domain.Notification) (domain.SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", ctx, n)
	ret0, _ := ret[0].(domain.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockExecutorServiceMockRecorder) SendNotification(ctx, n any) *ExecutorServiceSendNotificationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockExecutorService)(nil).SendNotification), ctx, n)
	return &ExecutorServiceSendNotificationCall{Call: call}
}

// ExecutorServiceSendNotificationCall wrap *gomock.Call
type ExecutorServiceSendNotificationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExecutorServiceSendNotificationCall) Return(arg0 domain.SendResponse, arg1 error) *ExecutorServiceSendNotificationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExecutorServiceSendNotificationCall) Do(f func(context.Context, domain.Notification) (domain.SendResponse, error)) *ExecutorServiceSendNotificationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExecutorServiceSendNotificationCall) DoAndReturn(f func(context.Context, domain.Notification) (domain.SendResponse, error)) *ExecutorServiceSendNotificationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendNotificationAsync mocks base method.
func (m *MockExecutorService) SendNotificationAsync(ctx context.Context, n domain.Notification) (domain.SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotificationAsync", ctx, n)
	ret0, _ := ret[0].(domain.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotificationAsync indicates an expected call of SendNotificationAsync.
func (mr *MockExecutorServiceMockRecorder) SendNotificationAsync(ctx, n any) *ExecutorServiceSendNotificationAsyncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotificationAsync", reflect.TypeOf((*MockExecutorService)(nil).SendNotificationAsync), ctx, n)
	return &ExecutorServiceSendNotificationAsyncCall{Call: call}
}

// ExecutorServiceSendNotificationAsyncCall wrap *gomock.Call
type ExecutorServiceSendNotificationAsyncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExecutorServiceSendNotificationAsyncCall) Return(arg0 domain.SendResponse, arg1 error) *ExecutorServiceSendNotificationAsyncCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExecutorServiceSendNotificationAsyncCall) Do(f func(context.Context, domain.Notification) (domain.SendResponse, error)) *ExecutorServiceSendNotificationAsyncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExecutorServiceSendNotificationAsyncCall) DoAndReturn(f func(context.Context, domain.Notification) (domain.SendResponse, error)) *ExecutorServiceSendNotificationAsyncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
