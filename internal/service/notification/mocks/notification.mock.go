// Code generated by MockGen. DO NOT EDIT.
// Source: ./notification.go
//
// Generated by this command:
//
//	mockgen -source=./notification.go -destination=../../mocks/notification.mock.go -package=notificationmocks -typed NotificationService
//

// Package notificationmocks is a generated GoMock package.
package notificationmocks

import (
	context "context"
	reflect "reflect"

	domain "gitee.com/flycash/notification-platform/internal/service/notification/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationService is a mock of NotificationService interface.
type MockNotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceMockRecorder
	isgomock struct{}
}

// MockNotificationServiceMockRecorder is the mock recorder for MockNotificationService.
type MockNotificationServiceMockRecorder struct {
	mock *MockNotificationService
}

// NewMockNotificationService creates a new mock instance.
func NewMockNotificationService(ctrl *gomock.Controller) *MockNotificationService {
	mock := &MockNotificationService{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationService) EXPECT() *MockNotificationServiceMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockNotificationService) BatchCreate(ctx context.Context, notifications []domain.Notification) ([]domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreate", ctx, notifications)
	ret0, _ := ret[0].([]domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockNotificationServiceMockRecorder) BatchCreate(ctx, notifications any) *MockNotificationServiceBatchCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockNotificationService)(nil).BatchCreate), ctx, notifications)
	return &MockNotificationServiceBatchCreateCall{Call: call}
}

// MockNotificationServiceBatchCreateCall wrap *gomock.Call
type MockNotificationServiceBatchCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceBatchCreateCall) Return(arg0 []domain.Notification, arg1 error) *MockNotificationServiceBatchCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceBatchCreateCall) Do(f func(context.Context, []domain.Notification) ([]domain.Notification, error)) *MockNotificationServiceBatchCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceBatchCreateCall) DoAndReturn(f func(context.Context, []domain.Notification) ([]domain.Notification, error)) *MockNotificationServiceBatchCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BatchGetByIDs mocks base method.
func (m *MockNotificationService) BatchGetByIDs(ctx context.Context, ids []uint64) (map[uint64]domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetByIDs", ctx, ids)
	ret0, _ := ret[0].(map[uint64]domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetByIDs indicates an expected call of BatchGetByIDs.
func (mr *MockNotificationServiceMockRecorder) BatchGetByIDs(ctx, ids any) *MockNotificationServiceBatchGetByIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetByIDs", reflect.TypeOf((*MockNotificationService)(nil).BatchGetByIDs), ctx, ids)
	return &MockNotificationServiceBatchGetByIDsCall{Call: call}
}

// MockNotificationServiceBatchGetByIDsCall wrap *gomock.Call
type MockNotificationServiceBatchGetByIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceBatchGetByIDsCall) Return(arg0 map[uint64]domain.Notification, arg1 error) *MockNotificationServiceBatchGetByIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceBatchGetByIDsCall) Do(f func(context.Context, []uint64) (map[uint64]domain.Notification, error)) *MockNotificationServiceBatchGetByIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceBatchGetByIDsCall) DoAndReturn(f func(context.Context, []uint64) (map[uint64]domain.Notification, error)) *MockNotificationServiceBatchGetByIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BatchUpdateStatus mocks base method.
func (m *MockNotificationService) BatchUpdateStatus(ctx context.Context, ids []uint64, status domain.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateStatus", ctx, ids, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateStatus indicates an expected call of BatchUpdateStatus.
func (mr *MockNotificationServiceMockRecorder) BatchUpdateStatus(ctx, ids, status any) *MockNotificationServiceBatchUpdateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateStatus", reflect.TypeOf((*MockNotificationService)(nil).BatchUpdateStatus), ctx, ids, status)
	return &MockNotificationServiceBatchUpdateStatusCall{Call: call}
}

// MockNotificationServiceBatchUpdateStatusCall wrap *gomock.Call
type MockNotificationServiceBatchUpdateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceBatchUpdateStatusCall) Return(arg0 error) *MockNotificationServiceBatchUpdateStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceBatchUpdateStatusCall) Do(f func(context.Context, []uint64, domain.Status) error) *MockNotificationServiceBatchUpdateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceBatchUpdateStatusCall) DoAndReturn(f func(context.Context, []uint64, domain.Status) error) *MockNotificationServiceBatchUpdateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BatchUpdateStatusSucceededOrFailed mocks base method.
func (m *MockNotificationService) BatchUpdateStatusSucceededOrFailed(ctx context.Context, succeededNotifications, failedNotifications []domain.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateStatusSucceededOrFailed", ctx, succeededNotifications, failedNotifications)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateStatusSucceededOrFailed indicates an expected call of BatchUpdateStatusSucceededOrFailed.
func (mr *MockNotificationServiceMockRecorder) BatchUpdateStatusSucceededOrFailed(ctx, succeededNotifications, failedNotifications any) *MockNotificationServiceBatchUpdateStatusSucceededOrFailedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateStatusSucceededOrFailed", reflect.TypeOf((*MockNotificationService)(nil).BatchUpdateStatusSucceededOrFailed), ctx, succeededNotifications, failedNotifications)
	return &MockNotificationServiceBatchUpdateStatusSucceededOrFailedCall{Call: call}
}

// MockNotificationServiceBatchUpdateStatusSucceededOrFailedCall wrap *gomock.Call
type MockNotificationServiceBatchUpdateStatusSucceededOrFailedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceBatchUpdateStatusSucceededOrFailedCall) Return(arg0 error) *MockNotificationServiceBatchUpdateStatusSucceededOrFailedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceBatchUpdateStatusSucceededOrFailedCall) Do(f func(context.Context, []domain.Notification, []domain.Notification) error) *MockNotificationServiceBatchUpdateStatusSucceededOrFailedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceBatchUpdateStatusSucceededOrFailedCall) DoAndReturn(f func(context.Context, []domain.Notification, []domain.Notification) error) *MockNotificationServiceBatchUpdateStatusSucceededOrFailedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockNotificationService) Create(ctx context.Context, notification domain.Notification) (domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, notification)
	ret0, _ := ret[0].(domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNotificationServiceMockRecorder) Create(ctx, notification any) *MockNotificationServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationService)(nil).Create), ctx, notification)
	return &MockNotificationServiceCreateCall{Call: call}
}

// MockNotificationServiceCreateCall wrap *gomock.Call
type MockNotificationServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceCreateCall) Return(arg0 domain.Notification, arg1 error) *MockNotificationServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceCreateCall) Do(f func(context.Context, domain.Notification) (domain.Notification, error)) *MockNotificationServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceCreateCall) DoAndReturn(f func(context.Context, domain.Notification) (domain.Notification, error)) *MockNotificationServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByBizID mocks base method.
func (m *MockNotificationService) GetByBizID(ctx context.Context, bizID int64) ([]domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBizID", ctx, bizID)
	ret0, _ := ret[0].([]domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBizID indicates an expected call of GetByBizID.
func (mr *MockNotificationServiceMockRecorder) GetByBizID(ctx, bizID any) *MockNotificationServiceGetByBizIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBizID", reflect.TypeOf((*MockNotificationService)(nil).GetByBizID), ctx, bizID)
	return &MockNotificationServiceGetByBizIDCall{Call: call}
}

// MockNotificationServiceGetByBizIDCall wrap *gomock.Call
type MockNotificationServiceGetByBizIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceGetByBizIDCall) Return(arg0 []domain.Notification, arg1 error) *MockNotificationServiceGetByBizIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceGetByBizIDCall) Do(f func(context.Context, int64) ([]domain.Notification, error)) *MockNotificationServiceGetByBizIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceGetByBizIDCall) DoAndReturn(f func(context.Context, int64) ([]domain.Notification, error)) *MockNotificationServiceGetByBizIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockNotificationService) GetByID(ctx context.Context, id uint64) (domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockNotificationServiceMockRecorder) GetByID(ctx, id any) *MockNotificationServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockNotificationService)(nil).GetByID), ctx, id)
	return &MockNotificationServiceGetByIDCall{Call: call}
}

// MockNotificationServiceGetByIDCall wrap *gomock.Call
type MockNotificationServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceGetByIDCall) Return(arg0 domain.Notification, arg1 error) *MockNotificationServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceGetByIDCall) Do(f func(context.Context, uint64) (domain.Notification, error)) *MockNotificationServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceGetByIDCall) DoAndReturn(f func(context.Context, uint64) (domain.Notification, error)) *MockNotificationServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByKeys mocks base method.
func (m *MockNotificationService) GetByKeys(ctx context.Context, bizID int64, keys ...string) ([]domain.Notification, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, bizID}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByKeys", varargs...)
	ret0, _ := ret[0].([]domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKeys indicates an expected call of GetByKeys.
func (mr *MockNotificationServiceMockRecorder) GetByKeys(ctx, bizID any, keys ...any) *MockNotificationServiceGetByKeysCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, bizID}, keys...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKeys", reflect.TypeOf((*MockNotificationService)(nil).GetByKeys), varargs...)
	return &MockNotificationServiceGetByKeysCall{Call: call}
}

// MockNotificationServiceGetByKeysCall wrap *gomock.Call
type MockNotificationServiceGetByKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceGetByKeysCall) Return(arg0 []domain.Notification, arg1 error) *MockNotificationServiceGetByKeysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceGetByKeysCall) Do(f func(context.Context, int64, ...string) ([]domain.Notification, error)) *MockNotificationServiceGetByKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceGetByKeysCall) DoAndReturn(f func(context.Context, int64, ...string) ([]domain.Notification, error)) *MockNotificationServiceGetByKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStatus mocks base method.
func (m *MockNotificationService) UpdateStatus(ctx context.Context, id uint64, status domain.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockNotificationServiceMockRecorder) UpdateStatus(ctx, id, status any) *MockNotificationServiceUpdateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNotificationService)(nil).UpdateStatus), ctx, id, status)
	return &MockNotificationServiceUpdateStatusCall{Call: call}
}

// MockNotificationServiceUpdateStatusCall wrap *gomock.Call
type MockNotificationServiceUpdateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceUpdateStatusCall) Return(arg0 error) *MockNotificationServiceUpdateStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceUpdateStatusCall) Do(f func(context.Context, uint64, domain.Status) error) *MockNotificationServiceUpdateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceUpdateStatusCall) DoAndReturn(f func(context.Context, uint64, domain.Status) error) *MockNotificationServiceUpdateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
