// Code generated by MockGen. DO NOT EDIT.
// Source: ./notification.go
//
// Generated by this command:
//
//	mockgen -source=./notification.go -destination=./mocks/notification.mock.go -package=notificationmocks -typed Service
//

// Package notificationmocks is a generated GoMock package.
package notificationmocks

import (
	context "context"
	reflect "reflect"

	domain "gitee.com/flycash/notification-platform/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// BatchGetByIDs mocks base method.
func (m *MockService) BatchGetByIDs(ctx context.Context, ids []uint64) (map[uint64]domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetByIDs", ctx, ids)
	ret0, _ := ret[0].(map[uint64]domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetByIDs indicates an expected call of BatchGetByIDs.
func (mr *MockServiceMockRecorder) BatchGetByIDs(ctx, ids any) *MockServiceBatchGetByIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetByIDs", reflect.TypeOf((*MockService)(nil).BatchGetByIDs), ctx, ids)
	return &MockServiceBatchGetByIDsCall{Call: call}
}

// MockServiceBatchGetByIDsCall wrap *gomock.Call
type MockServiceBatchGetByIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceBatchGetByIDsCall) Return(arg0 map[uint64]domain.Notification, arg1 error) *MockServiceBatchGetByIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceBatchGetByIDsCall) Do(f func(context.Context, []uint64) (map[uint64]domain.Notification, error)) *MockServiceBatchGetByIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceBatchGetByIDsCall) DoAndReturn(f func(context.Context, []uint64) (map[uint64]domain.Notification, error)) *MockServiceBatchGetByIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BatchUpdateStatus mocks base method.
func (m *MockService) BatchUpdateStatus(ctx context.Context, ids []uint64, status domain.SendStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateStatus", ctx, ids, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateStatus indicates an expected call of BatchUpdateStatus.
func (mr *MockServiceMockRecorder) BatchUpdateStatus(ctx, ids, status any) *MockServiceBatchUpdateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateStatus", reflect.TypeOf((*MockService)(nil).BatchUpdateStatus), ctx, ids, status)
	return &MockServiceBatchUpdateStatusCall{Call: call}
}

// MockServiceBatchUpdateStatusCall wrap *gomock.Call
type MockServiceBatchUpdateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceBatchUpdateStatusCall) Return(arg0 error) *MockServiceBatchUpdateStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceBatchUpdateStatusCall) Do(f func(context.Context, []uint64, domain.SendStatus) error) *MockServiceBatchUpdateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceBatchUpdateStatusCall) DoAndReturn(f func(context.Context, []uint64, domain.SendStatus) error) *MockServiceBatchUpdateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BatchUpdateStatusSucceededOrFailed mocks base method.
func (m *MockService) BatchUpdateStatusSucceededOrFailed(ctx context.Context, succeededNotifications, failedNotifications []domain.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateStatusSucceededOrFailed", ctx, succeededNotifications, failedNotifications)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateStatusSucceededOrFailed indicates an expected call of BatchUpdateStatusSucceededOrFailed.
func (mr *MockServiceMockRecorder) BatchUpdateStatusSucceededOrFailed(ctx, succeededNotifications, failedNotifications any) *MockServiceBatchUpdateStatusSucceededOrFailedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateStatusSucceededOrFailed", reflect.TypeOf((*MockService)(nil).BatchUpdateStatusSucceededOrFailed), ctx, succeededNotifications, failedNotifications)
	return &MockServiceBatchUpdateStatusSucceededOrFailedCall{Call: call}
}

// MockServiceBatchUpdateStatusSucceededOrFailedCall wrap *gomock.Call
type MockServiceBatchUpdateStatusSucceededOrFailedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceBatchUpdateStatusSucceededOrFailedCall) Return(arg0 error) *MockServiceBatchUpdateStatusSucceededOrFailedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceBatchUpdateStatusSucceededOrFailedCall) Do(f func(context.Context, []domain.Notification, []domain.Notification) error) *MockServiceBatchUpdateStatusSucceededOrFailedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceBatchUpdateStatusSucceededOrFailedCall) DoAndReturn(f func(context.Context, []domain.Notification, []domain.Notification) error) *MockServiceBatchUpdateStatusSucceededOrFailedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindReadyNotifications mocks base method.
func (m *MockService) FindReadyNotifications(ctx context.Context, offset, limit int) ([]domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReadyNotifications", ctx, offset, limit)
	ret0, _ := ret[0].([]domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReadyNotifications indicates an expected call of FindReadyNotifications.
func (mr *MockServiceMockRecorder) FindReadyNotifications(ctx, offset, limit any) *MockServiceFindReadyNotificationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReadyNotifications", reflect.TypeOf((*MockService)(nil).FindReadyNotifications), ctx, offset, limit)
	return &MockServiceFindReadyNotificationsCall{Call: call}
}

// MockServiceFindReadyNotificationsCall wrap *gomock.Call
type MockServiceFindReadyNotificationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFindReadyNotificationsCall) Return(arg0 []domain.Notification, arg1 error) *MockServiceFindReadyNotificationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFindReadyNotificationsCall) Do(f func(context.Context, int, int) ([]domain.Notification, error)) *MockServiceFindReadyNotificationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFindReadyNotificationsCall) DoAndReturn(f func(context.Context, int, int) ([]domain.Notification, error)) *MockServiceFindReadyNotificationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByBizID mocks base method.
func (m *MockService) GetByBizID(ctx context.Context, bizID int64) ([]domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBizID", ctx, bizID)
	ret0, _ := ret[0].([]domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBizID indicates an expected call of GetByBizID.
func (mr *MockServiceMockRecorder) GetByBizID(ctx, bizID any) *MockServiceGetByBizIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBizID", reflect.TypeOf((*MockService)(nil).GetByBizID), ctx, bizID)
	return &MockServiceGetByBizIDCall{Call: call}
}

// MockServiceGetByBizIDCall wrap *gomock.Call
type MockServiceGetByBizIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetByBizIDCall) Return(arg0 []domain.Notification, arg1 error) *MockServiceGetByBizIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetByBizIDCall) Do(f func(context.Context, int64) ([]domain.Notification, error)) *MockServiceGetByBizIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetByBizIDCall) DoAndReturn(f func(context.Context, int64) ([]domain.Notification, error)) *MockServiceGetByBizIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockService) GetByID(ctx context.Context, id uint64) (domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServiceMockRecorder) GetByID(ctx, id any) *MockServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockService)(nil).GetByID), ctx, id)
	return &MockServiceGetByIDCall{Call: call}
}

// MockServiceGetByIDCall wrap *gomock.Call
type MockServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetByIDCall) Return(arg0 domain.Notification, arg1 error) *MockServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetByIDCall) Do(f func(context.Context, uint64) (domain.Notification, error)) *MockServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetByIDCall) DoAndReturn(f func(context.Context, uint64) (domain.Notification, error)) *MockServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByKeys mocks base method.
func (m *MockService) GetByKeys(ctx context.Context, bizID int64, keys ...string) ([]domain.Notification, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, bizID}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByKeys", varargs...)
	ret0, _ := ret[0].([]domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKeys indicates an expected call of GetByKeys.
func (mr *MockServiceMockRecorder) GetByKeys(ctx, bizID any, keys ...any) *MockServiceGetByKeysCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, bizID}, keys...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKeys", reflect.TypeOf((*MockService)(nil).GetByKeys), varargs...)
	return &MockServiceGetByKeysCall{Call: call}
}

// MockServiceGetByKeysCall wrap *gomock.Call
type MockServiceGetByKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetByKeysCall) Return(arg0 []domain.Notification, arg1 error) *MockServiceGetByKeysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetByKeysCall) Do(f func(context.Context, int64, ...string) ([]domain.Notification, error)) *MockServiceGetByKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetByKeysCall) DoAndReturn(f func(context.Context, int64, ...string) ([]domain.Notification, error)) *MockServiceGetByKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStatus mocks base method.
func (m *MockService) UpdateStatus(ctx context.Context, notification domain.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockServiceMockRecorder) UpdateStatus(ctx, notification any) *MockServiceUpdateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockService)(nil).UpdateStatus), ctx, notification)
	return &MockServiceUpdateStatusCall{Call: call}
}

// MockServiceUpdateStatusCall wrap *gomock.Call
type MockServiceUpdateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateStatusCall) Return(arg0 error) *MockServiceUpdateStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateStatusCall) Do(f func(context.Context, domain.Notification) error) *MockServiceUpdateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateStatusCall) DoAndReturn(f func(context.Context, domain.Notification) error) *MockServiceUpdateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
