// Code generated by MockGen. DO NOT EDIT.
// Source: ./notification.go
//
// Generated by this command:
//
//	mockgen -source=./notification.go -destination=../../mocks/notification.mock.go -package=notificationmocks -typed NotificationService
//

// Package notificationmocks is a generated GoMock package.
package notificationmocks

import (
	context "context"
	reflect "reflect"

	domain "gitee.com/flycash/notification-platform/internal/service/notification/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationService is a mock of NotificationService interface.
type MockNotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceMockRecorder
	isgomock struct{}
}

// MockNotificationServiceMockRecorder is the mock recorder for MockNotificationService.
type MockNotificationServiceMockRecorder struct {
	mock *MockNotificationService
}

// NewMockNotificationService creates a new mock instance.
func NewMockNotificationService(ctrl *gomock.Controller) *MockNotificationService {
	mock := &MockNotificationService{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationService) EXPECT() *MockNotificationServiceMockRecorder {
	return m.recorder
}

// BatchCreateNotifications mocks base method.
func (m *MockNotificationService) BatchCreateNotifications(ctx context.Context, notifications []domain.Notification) ([]domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateNotifications", ctx, notifications)
	ret0, _ := ret[0].([]domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateNotifications indicates an expected call of BatchCreateNotifications.
func (mr *MockNotificationServiceMockRecorder) BatchCreateNotifications(ctx, notifications any) *MockNotificationServiceBatchCreateNotificationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateNotifications", reflect.TypeOf((*MockNotificationService)(nil).BatchCreateNotifications), ctx, notifications)
	return &MockNotificationServiceBatchCreateNotificationsCall{Call: call}
}

// MockNotificationServiceBatchCreateNotificationsCall wrap *gomock.Call
type MockNotificationServiceBatchCreateNotificationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceBatchCreateNotificationsCall) Return(arg0 []domain.Notification, arg1 error) *MockNotificationServiceBatchCreateNotificationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceBatchCreateNotificationsCall) Do(f func(context.Context, []domain.Notification) ([]domain.Notification, error)) *MockNotificationServiceBatchCreateNotificationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceBatchCreateNotificationsCall) DoAndReturn(f func(context.Context, []domain.Notification) ([]domain.Notification, error)) *MockNotificationServiceBatchCreateNotificationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BatchGetByIDs mocks base method.
func (m *MockNotificationService) BatchGetByIDs(ctx context.Context, ids []uint64) (map[uint64]domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetByIDs", ctx, ids)
	ret0, _ := ret[0].(map[uint64]domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetByIDs indicates an expected call of BatchGetByIDs.
func (mr *MockNotificationServiceMockRecorder) BatchGetByIDs(ctx, ids any) *MockNotificationServiceBatchGetByIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetByIDs", reflect.TypeOf((*MockNotificationService)(nil).BatchGetByIDs), ctx, ids)
	return &MockNotificationServiceBatchGetByIDsCall{Call: call}
}

// MockNotificationServiceBatchGetByIDsCall wrap *gomock.Call
type MockNotificationServiceBatchGetByIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceBatchGetByIDsCall) Return(arg0 map[uint64]domain.Notification, arg1 error) *MockNotificationServiceBatchGetByIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceBatchGetByIDsCall) Do(f func(context.Context, []uint64) (map[uint64]domain.Notification, error)) *MockNotificationServiceBatchGetByIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceBatchGetByIDsCall) DoAndReturn(f func(context.Context, []uint64) (map[uint64]domain.Notification, error)) *MockNotificationServiceBatchGetByIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BatchUpdateNotificationStatus mocks base method.
func (m *MockNotificationService) BatchUpdateNotificationStatus(ctx context.Context, ids []uint64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateNotificationStatus", ctx, ids, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateNotificationStatus indicates an expected call of BatchUpdateNotificationStatus.
func (mr *MockNotificationServiceMockRecorder) BatchUpdateNotificationStatus(ctx, ids, status any) *MockNotificationServiceBatchUpdateNotificationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateNotificationStatus", reflect.TypeOf((*MockNotificationService)(nil).BatchUpdateNotificationStatus), ctx, ids, status)
	return &MockNotificationServiceBatchUpdateNotificationStatusCall{Call: call}
}

// MockNotificationServiceBatchUpdateNotificationStatusCall wrap *gomock.Call
type MockNotificationServiceBatchUpdateNotificationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceBatchUpdateNotificationStatusCall) Return(arg0 error) *MockNotificationServiceBatchUpdateNotificationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceBatchUpdateNotificationStatusCall) Do(f func(context.Context, []uint64, string) error) *MockNotificationServiceBatchUpdateNotificationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceBatchUpdateNotificationStatusCall) DoAndReturn(f func(context.Context, []uint64, string) error) *MockNotificationServiceBatchUpdateNotificationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BatchUpdateNotificationStatusSucceededOrFailed mocks base method.
func (m *MockNotificationService) BatchUpdateNotificationStatusSucceededOrFailed(ctx context.Context, succeededNotifications, failedNotifications []domain.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateNotificationStatusSucceededOrFailed", ctx, succeededNotifications, failedNotifications)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateNotificationStatusSucceededOrFailed indicates an expected call of BatchUpdateNotificationStatusSucceededOrFailed.
func (mr *MockNotificationServiceMockRecorder) BatchUpdateNotificationStatusSucceededOrFailed(ctx, succeededNotifications, failedNotifications any) *MockNotificationServiceBatchUpdateNotificationStatusSucceededOrFailedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateNotificationStatusSucceededOrFailed", reflect.TypeOf((*MockNotificationService)(nil).BatchUpdateNotificationStatusSucceededOrFailed), ctx, succeededNotifications, failedNotifications)
	return &MockNotificationServiceBatchUpdateNotificationStatusSucceededOrFailedCall{Call: call}
}

// MockNotificationServiceBatchUpdateNotificationStatusSucceededOrFailedCall wrap *gomock.Call
type MockNotificationServiceBatchUpdateNotificationStatusSucceededOrFailedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceBatchUpdateNotificationStatusSucceededOrFailedCall) Return(arg0 error) *MockNotificationServiceBatchUpdateNotificationStatusSucceededOrFailedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceBatchUpdateNotificationStatusSucceededOrFailedCall) Do(f func(context.Context, []domain.Notification, []domain.Notification) error) *MockNotificationServiceBatchUpdateNotificationStatusSucceededOrFailedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceBatchUpdateNotificationStatusSucceededOrFailedCall) DoAndReturn(f func(context.Context, []domain.Notification, []domain.Notification) error) *MockNotificationServiceBatchUpdateNotificationStatusSucceededOrFailedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNotification mocks base method.
func (m *MockNotificationService) CreateNotification(ctx context.Context, notification domain.Notification) (domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", ctx, notification)
	ret0, _ := ret[0].(domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockNotificationServiceMockRecorder) CreateNotification(ctx, notification any) *MockNotificationServiceCreateNotificationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockNotificationService)(nil).CreateNotification), ctx, notification)
	return &MockNotificationServiceCreateNotificationCall{Call: call}
}

// MockNotificationServiceCreateNotificationCall wrap *gomock.Call
type MockNotificationServiceCreateNotificationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceCreateNotificationCall) Return(arg0 domain.Notification, arg1 error) *MockNotificationServiceCreateNotificationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceCreateNotificationCall) Do(f func(context.Context, domain.Notification) (domain.Notification, error)) *MockNotificationServiceCreateNotificationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceCreateNotificationCall) DoAndReturn(f func(context.Context, domain.Notification) (domain.Notification, error)) *MockNotificationServiceCreateNotificationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNotificationByID mocks base method.
func (m *MockNotificationService) GetNotificationByID(ctx context.Context, id uint64) (domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationByID", ctx, id)
	ret0, _ := ret[0].(domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationByID indicates an expected call of GetNotificationByID.
func (mr *MockNotificationServiceMockRecorder) GetNotificationByID(ctx, id any) *MockNotificationServiceGetNotificationByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationByID", reflect.TypeOf((*MockNotificationService)(nil).GetNotificationByID), ctx, id)
	return &MockNotificationServiceGetNotificationByIDCall{Call: call}
}

// MockNotificationServiceGetNotificationByIDCall wrap *gomock.Call
type MockNotificationServiceGetNotificationByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceGetNotificationByIDCall) Return(arg0 domain.Notification, arg1 error) *MockNotificationServiceGetNotificationByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceGetNotificationByIDCall) Do(f func(context.Context, uint64) (domain.Notification, error)) *MockNotificationServiceGetNotificationByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceGetNotificationByIDCall) DoAndReturn(f func(context.Context, uint64) (domain.Notification, error)) *MockNotificationServiceGetNotificationByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNotificationsByBizID mocks base method.
func (m *MockNotificationService) GetNotificationsByBizID(ctx context.Context, bizID int64) ([]domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationsByBizID", ctx, bizID)
	ret0, _ := ret[0].([]domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationsByBizID indicates an expected call of GetNotificationsByBizID.
func (mr *MockNotificationServiceMockRecorder) GetNotificationsByBizID(ctx, bizID any) *MockNotificationServiceGetNotificationsByBizIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationsByBizID", reflect.TypeOf((*MockNotificationService)(nil).GetNotificationsByBizID), ctx, bizID)
	return &MockNotificationServiceGetNotificationsByBizIDCall{Call: call}
}

// MockNotificationServiceGetNotificationsByBizIDCall wrap *gomock.Call
type MockNotificationServiceGetNotificationsByBizIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceGetNotificationsByBizIDCall) Return(arg0 []domain.Notification, arg1 error) *MockNotificationServiceGetNotificationsByBizIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceGetNotificationsByBizIDCall) Do(f func(context.Context, int64) ([]domain.Notification, error)) *MockNotificationServiceGetNotificationsByBizIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceGetNotificationsByBizIDCall) DoAndReturn(f func(context.Context, int64) ([]domain.Notification, error)) *MockNotificationServiceGetNotificationsByBizIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNotificationsByKeys mocks base method.
func (m *MockNotificationService) GetNotificationsByKeys(ctx context.Context, bizID int64, keys ...string) ([]domain.Notification, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, bizID}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNotificationsByKeys", varargs...)
	ret0, _ := ret[0].([]domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationsByKeys indicates an expected call of GetNotificationsByKeys.
func (mr *MockNotificationServiceMockRecorder) GetNotificationsByKeys(ctx, bizID any, keys ...any) *MockNotificationServiceGetNotificationsByKeysCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, bizID}, keys...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationsByKeys", reflect.TypeOf((*MockNotificationService)(nil).GetNotificationsByKeys), varargs...)
	return &MockNotificationServiceGetNotificationsByKeysCall{Call: call}
}

// MockNotificationServiceGetNotificationsByKeysCall wrap *gomock.Call
type MockNotificationServiceGetNotificationsByKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceGetNotificationsByKeysCall) Return(arg0 []domain.Notification, arg1 error) *MockNotificationServiceGetNotificationsByKeysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceGetNotificationsByKeysCall) Do(f func(context.Context, int64, ...string) ([]domain.Notification, error)) *MockNotificationServiceGetNotificationsByKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceGetNotificationsByKeysCall) DoAndReturn(f func(context.Context, int64, ...string) ([]domain.Notification, error)) *MockNotificationServiceGetNotificationsByKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateNotificationStatus mocks base method.
func (m *MockNotificationService) UpdateNotificationStatus(ctx context.Context, id uint64, status domain.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotificationStatus indicates an expected call of UpdateNotificationStatus.
func (mr *MockNotificationServiceMockRecorder) UpdateNotificationStatus(ctx, id, status any) *MockNotificationServiceUpdateNotificationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationStatus", reflect.TypeOf((*MockNotificationService)(nil).UpdateNotificationStatus), ctx, id, status)
	return &MockNotificationServiceUpdateNotificationStatusCall{Call: call}
}

// MockNotificationServiceUpdateNotificationStatusCall wrap *gomock.Call
type MockNotificationServiceUpdateNotificationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServiceUpdateNotificationStatusCall) Return(arg0 error) *MockNotificationServiceUpdateNotificationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServiceUpdateNotificationStatusCall) Do(f func(context.Context, uint64, domain.Status) error) *MockNotificationServiceUpdateNotificationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServiceUpdateNotificationStatusCall) DoAndReturn(f func(context.Context, uint64, domain.Status) error) *MockNotificationServiceUpdateNotificationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
