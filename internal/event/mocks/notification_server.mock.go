// Code generated by MockGen. DO NOT EDIT.
// Source: ./consumer.go
//
// Generated by this command:
//
//	mockgen -source=./consumer.go -package=evtmocks -destination=../mocks/notification_server.mock.go -typed NotificationServer
//

// Package evtmocks is a generated GoMock package.
package evtmocks

import (
	context "context"
	reflect "reflect"

	notificationv1 "gitee.com/flycash/notification-platform/api/proto/gen/notification/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationServer is a mock of NotificationServer interface.
type MockNotificationServer struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServerMockRecorder
	isgomock struct{}
}

// MockNotificationServerMockRecorder is the mock recorder for MockNotificationServer.
type MockNotificationServerMockRecorder struct {
	mock *MockNotificationServer
}

// NewMockNotificationServer creates a new mock instance.
func NewMockNotificationServer(ctrl *gomock.Controller) *MockNotificationServer {
	mock := &MockNotificationServer{ctrl: ctrl}
	mock.recorder = &MockNotificationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationServer) EXPECT() *MockNotificationServerMockRecorder {
	return m.recorder
}

// BatchQueryNotifications mocks base method.
func (m *MockNotificationServer) BatchQueryNotifications(arg0 context.Context, arg1 *notificationv1.BatchQueryNotificationsRequest) (*notificationv1.BatchQueryNotificationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchQueryNotifications", arg0, arg1)
	ret0, _ := ret[0].(*notificationv1.BatchQueryNotificationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchQueryNotifications indicates an expected call of BatchQueryNotifications.
func (mr *MockNotificationServerMockRecorder) BatchQueryNotifications(arg0, arg1 any) *MockNotificationServerBatchQueryNotificationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchQueryNotifications", reflect.TypeOf((*MockNotificationServer)(nil).BatchQueryNotifications), arg0, arg1)
	return &MockNotificationServerBatchQueryNotificationsCall{Call: call}
}

// MockNotificationServerBatchQueryNotificationsCall wrap *gomock.Call
type MockNotificationServerBatchQueryNotificationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServerBatchQueryNotificationsCall) Return(arg0 *notificationv1.BatchQueryNotificationsResponse, arg1 error) *MockNotificationServerBatchQueryNotificationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServerBatchQueryNotificationsCall) Do(f func(context.Context, *notificationv1.BatchQueryNotificationsRequest) (*notificationv1.BatchQueryNotificationsResponse, error)) *MockNotificationServerBatchQueryNotificationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServerBatchQueryNotificationsCall) DoAndReturn(f func(context.Context, *notificationv1.BatchQueryNotificationsRequest) (*notificationv1.BatchQueryNotificationsResponse, error)) *MockNotificationServerBatchQueryNotificationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BatchSendNotifications mocks base method.
func (m *MockNotificationServer) BatchSendNotifications(arg0 context.Context, arg1 *notificationv1.BatchSendNotificationsRequest) (*notificationv1.BatchSendNotificationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSendNotifications", arg0, arg1)
	ret0, _ := ret[0].(*notificationv1.BatchSendNotificationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSendNotifications indicates an expected call of BatchSendNotifications.
func (mr *MockNotificationServerMockRecorder) BatchSendNotifications(arg0, arg1 any) *MockNotificationServerBatchSendNotificationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSendNotifications", reflect.TypeOf((*MockNotificationServer)(nil).BatchSendNotifications), arg0, arg1)
	return &MockNotificationServerBatchSendNotificationsCall{Call: call}
}

// MockNotificationServerBatchSendNotificationsCall wrap *gomock.Call
type MockNotificationServerBatchSendNotificationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServerBatchSendNotificationsCall) Return(arg0 *notificationv1.BatchSendNotificationsResponse, arg1 error) *MockNotificationServerBatchSendNotificationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServerBatchSendNotificationsCall) Do(f func(context.Context, *notificationv1.BatchSendNotificationsRequest) (*notificationv1.BatchSendNotificationsResponse, error)) *MockNotificationServerBatchSendNotificationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServerBatchSendNotificationsCall) DoAndReturn(f func(context.Context, *notificationv1.BatchSendNotificationsRequest) (*notificationv1.BatchSendNotificationsResponse, error)) *MockNotificationServerBatchSendNotificationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BatchSendNotificationsAsync mocks base method.
func (m *MockNotificationServer) BatchSendNotificationsAsync(arg0 context.Context, arg1 *notificationv1.BatchSendNotificationsAsyncRequest) (*notificationv1.BatchSendNotificationsAsyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSendNotificationsAsync", arg0, arg1)
	ret0, _ := ret[0].(*notificationv1.BatchSendNotificationsAsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSendNotificationsAsync indicates an expected call of BatchSendNotificationsAsync.
func (mr *MockNotificationServerMockRecorder) BatchSendNotificationsAsync(arg0, arg1 any) *MockNotificationServerBatchSendNotificationsAsyncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSendNotificationsAsync", reflect.TypeOf((*MockNotificationServer)(nil).BatchSendNotificationsAsync), arg0, arg1)
	return &MockNotificationServerBatchSendNotificationsAsyncCall{Call: call}
}

// MockNotificationServerBatchSendNotificationsAsyncCall wrap *gomock.Call
type MockNotificationServerBatchSendNotificationsAsyncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServerBatchSendNotificationsAsyncCall) Return(arg0 *notificationv1.BatchSendNotificationsAsyncResponse, arg1 error) *MockNotificationServerBatchSendNotificationsAsyncCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServerBatchSendNotificationsAsyncCall) Do(f func(context.Context, *notificationv1.BatchSendNotificationsAsyncRequest) (*notificationv1.BatchSendNotificationsAsyncResponse, error)) *MockNotificationServerBatchSendNotificationsAsyncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServerBatchSendNotificationsAsyncCall) DoAndReturn(f func(context.Context, *notificationv1.BatchSendNotificationsAsyncRequest) (*notificationv1.BatchSendNotificationsAsyncResponse, error)) *MockNotificationServerBatchSendNotificationsAsyncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryNotification mocks base method.
func (m *MockNotificationServer) QueryNotification(arg0 context.Context, arg1 *notificationv1.QueryNotificationRequest) (*notificationv1.QueryNotificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryNotification", arg0, arg1)
	ret0, _ := ret[0].(*notificationv1.QueryNotificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryNotification indicates an expected call of QueryNotification.
func (mr *MockNotificationServerMockRecorder) QueryNotification(arg0, arg1 any) *MockNotificationServerQueryNotificationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNotification", reflect.TypeOf((*MockNotificationServer)(nil).QueryNotification), arg0, arg1)
	return &MockNotificationServerQueryNotificationCall{Call: call}
}

// MockNotificationServerQueryNotificationCall wrap *gomock.Call
type MockNotificationServerQueryNotificationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServerQueryNotificationCall) Return(arg0 *notificationv1.QueryNotificationResponse, arg1 error) *MockNotificationServerQueryNotificationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServerQueryNotificationCall) Do(f func(context.Context, *notificationv1.QueryNotificationRequest) (*notificationv1.QueryNotificationResponse, error)) *MockNotificationServerQueryNotificationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServerQueryNotificationCall) DoAndReturn(f func(context.Context, *notificationv1.QueryNotificationRequest) (*notificationv1.QueryNotificationResponse, error)) *MockNotificationServerQueryNotificationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendNotification mocks base method.
func (m *MockNotificationServer) SendNotification(arg0 context.Context, arg1 *notificationv1.SendNotificationRequest) (*notificationv1.SendNotificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", arg0, arg1)
	ret0, _ := ret[0].(*notificationv1.SendNotificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockNotificationServerMockRecorder) SendNotification(arg0, arg1 any) *MockNotificationServerSendNotificationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockNotificationServer)(nil).SendNotification), arg0, arg1)
	return &MockNotificationServerSendNotificationCall{Call: call}
}

// MockNotificationServerSendNotificationCall wrap *gomock.Call
type MockNotificationServerSendNotificationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServerSendNotificationCall) Return(arg0 *notificationv1.SendNotificationResponse, arg1 error) *MockNotificationServerSendNotificationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServerSendNotificationCall) Do(f func(context.Context, *notificationv1.SendNotificationRequest) (*notificationv1.SendNotificationResponse, error)) *MockNotificationServerSendNotificationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServerSendNotificationCall) DoAndReturn(f func(context.Context, *notificationv1.SendNotificationRequest) (*notificationv1.SendNotificationResponse, error)) *MockNotificationServerSendNotificationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendNotificationAsync mocks base method.
func (m *MockNotificationServer) SendNotificationAsync(arg0 context.Context, arg1 *notificationv1.SendNotificationAsyncRequest) (*notificationv1.SendNotificationAsyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotificationAsync", arg0, arg1)
	ret0, _ := ret[0].(*notificationv1.SendNotificationAsyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotificationAsync indicates an expected call of SendNotificationAsync.
func (mr *MockNotificationServerMockRecorder) SendNotificationAsync(arg0, arg1 any) *MockNotificationServerSendNotificationAsyncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotificationAsync", reflect.TypeOf((*MockNotificationServer)(nil).SendNotificationAsync), arg0, arg1)
	return &MockNotificationServerSendNotificationAsyncCall{Call: call}
}

// MockNotificationServerSendNotificationAsyncCall wrap *gomock.Call
type MockNotificationServerSendNotificationAsyncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServerSendNotificationAsyncCall) Return(arg0 *notificationv1.SendNotificationAsyncResponse, arg1 error) *MockNotificationServerSendNotificationAsyncCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServerSendNotificationAsyncCall) Do(f func(context.Context, *notificationv1.SendNotificationAsyncRequest) (*notificationv1.SendNotificationAsyncResponse, error)) *MockNotificationServerSendNotificationAsyncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServerSendNotificationAsyncCall) DoAndReturn(f func(context.Context, *notificationv1.SendNotificationAsyncRequest) (*notificationv1.SendNotificationAsyncResponse, error)) *MockNotificationServerSendNotificationAsyncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TxCancel mocks base method.
func (m *MockNotificationServer) TxCancel(arg0 context.Context, arg1 *notificationv1.TxCancelRequest) (*notificationv1.TxCancelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxCancel", arg0, arg1)
	ret0, _ := ret[0].(*notificationv1.TxCancelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxCancel indicates an expected call of TxCancel.
func (mr *MockNotificationServerMockRecorder) TxCancel(arg0, arg1 any) *MockNotificationServerTxCancelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxCancel", reflect.TypeOf((*MockNotificationServer)(nil).TxCancel), arg0, arg1)
	return &MockNotificationServerTxCancelCall{Call: call}
}

// MockNotificationServerTxCancelCall wrap *gomock.Call
type MockNotificationServerTxCancelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServerTxCancelCall) Return(arg0 *notificationv1.TxCancelResponse, arg1 error) *MockNotificationServerTxCancelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServerTxCancelCall) Do(f func(context.Context, *notificationv1.TxCancelRequest) (*notificationv1.TxCancelResponse, error)) *MockNotificationServerTxCancelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServerTxCancelCall) DoAndReturn(f func(context.Context, *notificationv1.TxCancelRequest) (*notificationv1.TxCancelResponse, error)) *MockNotificationServerTxCancelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TxCommit mocks base method.
func (m *MockNotificationServer) TxCommit(arg0 context.Context, arg1 *notificationv1.TxCommitRequest) (*notificationv1.TxCommitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxCommit", arg0, arg1)
	ret0, _ := ret[0].(*notificationv1.TxCommitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxCommit indicates an expected call of TxCommit.
func (mr *MockNotificationServerMockRecorder) TxCommit(arg0, arg1 any) *MockNotificationServerTxCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxCommit", reflect.TypeOf((*MockNotificationServer)(nil).TxCommit), arg0, arg1)
	return &MockNotificationServerTxCommitCall{Call: call}
}

// MockNotificationServerTxCommitCall wrap *gomock.Call
type MockNotificationServerTxCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServerTxCommitCall) Return(arg0 *notificationv1.TxCommitResponse, arg1 error) *MockNotificationServerTxCommitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServerTxCommitCall) Do(f func(context.Context, *notificationv1.TxCommitRequest) (*notificationv1.TxCommitResponse, error)) *MockNotificationServerTxCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServerTxCommitCall) DoAndReturn(f func(context.Context, *notificationv1.TxCommitRequest) (*notificationv1.TxCommitResponse, error)) *MockNotificationServerTxCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TxPrepare mocks base method.
func (m *MockNotificationServer) TxPrepare(arg0 context.Context, arg1 *notificationv1.TxPrepareRequest) (*notificationv1.TxPrepareResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPrepare", arg0, arg1)
	ret0, _ := ret[0].(*notificationv1.TxPrepareResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxPrepare indicates an expected call of TxPrepare.
func (mr *MockNotificationServerMockRecorder) TxPrepare(arg0, arg1 any) *MockNotificationServerTxPrepareCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPrepare", reflect.TypeOf((*MockNotificationServer)(nil).TxPrepare), arg0, arg1)
	return &MockNotificationServerTxPrepareCall{Call: call}
}

// MockNotificationServerTxPrepareCall wrap *gomock.Call
type MockNotificationServerTxPrepareCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationServerTxPrepareCall) Return(arg0 *notificationv1.TxPrepareResponse, arg1 error) *MockNotificationServerTxPrepareCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationServerTxPrepareCall) Do(f func(context.Context, *notificationv1.TxPrepareRequest) (*notificationv1.TxPrepareResponse, error)) *MockNotificationServerTxPrepareCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationServerTxPrepareCall) DoAndReturn(f func(context.Context, *notificationv1.TxPrepareRequest) (*notificationv1.TxPrepareResponse, error)) *MockNotificationServerTxPrepareCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
