// Code generated by MockGen. DO NOT EDIT.
// Source: ./consumer.go
//
// Generated by this command:
//
//	mockgen -source=./consumer.go -package=evtmocks -destination=../mocks/kafka_consumer.mock.go -typed KafkaConsumer
//

// Package evtmocks is a generated GoMock package.
package evtmocks

import (
	reflect "reflect"
	time "time"

	kafka "github.com/confluentinc/confluent-kafka-go/kafka"
	gomock "go.uber.org/mock/gomock"
)

// MockKafkaConsumer is a mock of KafkaConsumer interface.
type MockKafkaConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaConsumerMockRecorder
	isgomock struct{}
}

// MockKafkaConsumerMockRecorder is the mock recorder for MockKafkaConsumer.
type MockKafkaConsumerMockRecorder struct {
	mock *MockKafkaConsumer
}

// NewMockKafkaConsumer creates a new mock instance.
func NewMockKafkaConsumer(ctrl *gomock.Controller) *MockKafkaConsumer {
	mock := &MockKafkaConsumer{ctrl: ctrl}
	mock.recorder = &MockKafkaConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaConsumer) EXPECT() *MockKafkaConsumerMockRecorder {
	return m.recorder
}

// CommitMessage mocks base method.
func (m_2 *MockKafkaConsumer) CommitMessage(m *kafka.Message) ([]kafka.TopicPartition, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CommitMessage", m)
	ret0, _ := ret[0].([]kafka.TopicPartition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitMessage indicates an expected call of CommitMessage.
func (mr *MockKafkaConsumerMockRecorder) CommitMessage(m any) *MockKafkaConsumerCommitMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitMessage", reflect.TypeOf((*MockKafkaConsumer)(nil).CommitMessage), m)
	return &MockKafkaConsumerCommitMessageCall{Call: call}
}

// MockKafkaConsumerCommitMessageCall wrap *gomock.Call
type MockKafkaConsumerCommitMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKafkaConsumerCommitMessageCall) Return(arg0 []kafka.TopicPartition, arg1 error) *MockKafkaConsumerCommitMessageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKafkaConsumerCommitMessageCall) Do(f func(*kafka.Message) ([]kafka.TopicPartition, error)) *MockKafkaConsumerCommitMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKafkaConsumerCommitMessageCall) DoAndReturn(f func(*kafka.Message) ([]kafka.TopicPartition, error)) *MockKafkaConsumerCommitMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Pause mocks base method.
func (m *MockKafkaConsumer) Pause(partitions []kafka.TopicPartition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", partitions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockKafkaConsumerMockRecorder) Pause(partitions any) *MockKafkaConsumerPauseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockKafkaConsumer)(nil).Pause), partitions)
	return &MockKafkaConsumerPauseCall{Call: call}
}

// MockKafkaConsumerPauseCall wrap *gomock.Call
type MockKafkaConsumerPauseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKafkaConsumerPauseCall) Return(err error) *MockKafkaConsumerPauseCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKafkaConsumerPauseCall) Do(f func([]kafka.TopicPartition) error) *MockKafkaConsumerPauseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKafkaConsumerPauseCall) DoAndReturn(f func([]kafka.TopicPartition) error) *MockKafkaConsumerPauseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Poll mocks base method.
func (m *MockKafkaConsumer) Poll(timeoutMs int) kafka.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Poll", timeoutMs)
	ret0, _ := ret[0].(kafka.Event)
	return ret0
}

// Poll indicates an expected call of Poll.
func (mr *MockKafkaConsumerMockRecorder) Poll(timeoutMs any) *MockKafkaConsumerPollCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockKafkaConsumer)(nil).Poll), timeoutMs)
	return &MockKafkaConsumerPollCall{Call: call}
}

// MockKafkaConsumerPollCall wrap *gomock.Call
type MockKafkaConsumerPollCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKafkaConsumerPollCall) Return(event kafka.Event) *MockKafkaConsumerPollCall {
	c.Call = c.Call.Return(event)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKafkaConsumerPollCall) Do(f func(int) kafka.Event) *MockKafkaConsumerPollCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKafkaConsumerPollCall) DoAndReturn(f func(int) kafka.Event) *MockKafkaConsumerPollCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadMessage mocks base method.
func (m *MockKafkaConsumer) ReadMessage(timeout time.Duration) (*kafka.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage", timeout)
	ret0, _ := ret[0].(*kafka.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockKafkaConsumerMockRecorder) ReadMessage(timeout any) *MockKafkaConsumerReadMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockKafkaConsumer)(nil).ReadMessage), timeout)
	return &MockKafkaConsumerReadMessageCall{Call: call}
}

// MockKafkaConsumerReadMessageCall wrap *gomock.Call
type MockKafkaConsumerReadMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKafkaConsumerReadMessageCall) Return(arg0 *kafka.Message, arg1 error) *MockKafkaConsumerReadMessageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKafkaConsumerReadMessageCall) Do(f func(time.Duration) (*kafka.Message, error)) *MockKafkaConsumerReadMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKafkaConsumerReadMessageCall) DoAndReturn(f func(time.Duration) (*kafka.Message, error)) *MockKafkaConsumerReadMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Resume mocks base method.
func (m *MockKafkaConsumer) Resume(partitions []kafka.TopicPartition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", partitions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockKafkaConsumerMockRecorder) Resume(partitions any) *MockKafkaConsumerResumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockKafkaConsumer)(nil).Resume), partitions)
	return &MockKafkaConsumerResumeCall{Call: call}
}

// MockKafkaConsumerResumeCall wrap *gomock.Call
type MockKafkaConsumerResumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKafkaConsumerResumeCall) Return(err error) *MockKafkaConsumerResumeCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKafkaConsumerResumeCall) Do(f func([]kafka.TopicPartition) error) *MockKafkaConsumerResumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKafkaConsumerResumeCall) DoAndReturn(f func([]kafka.TopicPartition) error) *MockKafkaConsumerResumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
