// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ecodeclub/mq-api (interfaces: MQ,Producer,Consumer)
//
// Generated by this command:
//
//	mockgen -destination=internal/event/mocks/mq_api.mock.go -package=evtmocks github.com/ecodeclub/mq-api MQ,Producer,Consumer
//

// Package evtmocks is a generated GoMock package.
package evtmocks

import (
	context "context"
	reflect "reflect"

	mq "github.com/ecodeclub/mq-api"
	gomock "go.uber.org/mock/gomock"
)

// MockMQ is a mock of MQ interface.
type MockMQ struct {
	ctrl     *gomock.Controller
	recorder *MockMQMockRecorder
	isgomock struct{}
}

// MockMQMockRecorder is the mock recorder for MockMQ.
type MockMQMockRecorder struct {
	mock *MockMQ
}

// NewMockMQ creates a new mock instance.
func NewMockMQ(ctrl *gomock.Controller) *MockMQ {
	mock := &MockMQ{ctrl: ctrl}
	mock.recorder = &MockMQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMQ) EXPECT() *MockMQMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMQ) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMQMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMQ)(nil).Close))
}

// Consumer mocks base method.
func (m *MockMQ) Consumer(topic, groupID string) (mq.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consumer", topic, groupID)
	ret0, _ := ret[0].(mq.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consumer indicates an expected call of Consumer.
func (mr *MockMQMockRecorder) Consumer(topic, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumer", reflect.TypeOf((*MockMQ)(nil).Consumer), topic, groupID)
}

// CreateTopic mocks base method.
func (m *MockMQ) CreateTopic(ctx context.Context, topic string, partitions int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", ctx, topic, partitions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockMQMockRecorder) CreateTopic(ctx, topic, partitions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockMQ)(nil).CreateTopic), ctx, topic, partitions)
}

// DeleteTopics mocks base method.
func (m *MockMQ) DeleteTopics(ctx context.Context, topics ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range topics {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTopics", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopics indicates an expected call of DeleteTopics.
func (mr *MockMQMockRecorder) DeleteTopics(ctx any, topics ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, topics...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopics", reflect.TypeOf((*MockMQ)(nil).DeleteTopics), varargs...)
}

// Producer mocks base method.
func (m *MockMQ) Producer(topic string) (mq.Producer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Producer", topic)
	ret0, _ := ret[0].(mq.Producer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Producer indicates an expected call of Producer.
func (mr *MockMQMockRecorder) Producer(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Producer", reflect.TypeOf((*MockMQ)(nil).Producer), topic)
}

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
	isgomock struct{}
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducer)(nil).Close))
}

// Produce mocks base method.
func (m_2 *MockProducer) Produce(ctx context.Context, m *mq.Message) (*mq.ProducerResult, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Produce", ctx, m)
	ret0, _ := ret[0].(*mq.ProducerResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Produce indicates an expected call of Produce.
func (mr *MockProducerMockRecorder) Produce(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockProducer)(nil).Produce), ctx, m)
}

// ProduceWithPartition mocks base method.
func (m_2 *MockProducer) ProduceWithPartition(ctx context.Context, m *mq.Message, partition int) (*mq.ProducerResult, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "ProduceWithPartition", ctx, m, partition)
	ret0, _ := ret[0].(*mq.ProducerResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProduceWithPartition indicates an expected call of ProduceWithPartition.
func (mr *MockProducerMockRecorder) ProduceWithPartition(ctx, m, partition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceWithPartition", reflect.TypeOf((*MockProducer)(nil).ProduceWithPartition), ctx, m, partition)
}

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
	isgomock struct{}
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConsumer)(nil).Close))
}

// Consume mocks base method.
func (m *MockConsumer) Consume(ctx context.Context) (*mq.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx)
	ret0, _ := ret[0].(*mq.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockConsumerMockRecorder) Consume(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockConsumer)(nil).Consume), ctx)
}

// ConsumeChan mocks base method.
func (m *MockConsumer) ConsumeChan(ctx context.Context) (<-chan *mq.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeChan", ctx)
	ret0, _ := ret[0].(<-chan *mq.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumeChan indicates an expected call of ConsumeChan.
func (mr *MockConsumerMockRecorder) ConsumeChan(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeChan", reflect.TypeOf((*MockConsumer)(nil).ConsumeChan), ctx)
}
