// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package notification

import (
	"gitee.com/flycash/notification-platform/internal/repository"
	"gitee.com/flycash/notification-platform/internal/repository/cache"
	"gitee.com/flycash/notification-platform/internal/repository/cache/redis"
	"gitee.com/flycash/notification-platform/internal/repository/dao"
	"gitee.com/flycash/notification-platform/internal/service/notification"
	"gitee.com/flycash/notification-platform/internal/test/ioc"
)

// Injectors from wire.go:

func Init() *Service {
	v := ioc.InitDBAndTables()
	notificationDAO := dao.NewNotificationDAO(v)
	cmdable := ioc.InitRedis()
	quotaCache := redis.NewQuotaCache(cmdable)
	notificationRepository := repository.NewNotificationRepository(notificationDAO, quotaCache)
	service := notification.NewNotificationService(notificationRepository)
	quotaRepository := repository.NewQuotaRepositoryV2(quotaCache)
	callbackLogDAO := dao.NewCallbackLogDAO(v)
	callbackLogRepository := repository.NewCallbackLogRepository(notificationRepository, callbackLogDAO)
	notificationService := &Service{
		Svc:             service,
		QuotaCache:      quotaCache,
		Repo:            notificationRepository,
		QuotaRepo:       quotaRepository,
		CallbackLogRepo: callbackLogRepository,
	}
	return notificationService
}

// wire.go:

type Service struct {
	Svc             notification.Service
	QuotaCache      cache.QuotaCache
	Repo            repository.NotificationRepository
	QuotaRepo       repository.QuotaRepository
	CallbackLogRepo repository.CallbackLogRepository
}
