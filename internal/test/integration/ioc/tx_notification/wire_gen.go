// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package tx_notification

import (
	"gitee.com/flycash/notification-platform/internal/repository"
	"gitee.com/flycash/notification-platform/internal/repository/cache/redis"
	"gitee.com/flycash/notification-platform/internal/repository/dao"
	"gitee.com/flycash/notification-platform/internal/service/config"
	"gitee.com/flycash/notification-platform/internal/service/notification"
	"gitee.com/flycash/notification-platform/internal/service/sender"
	"gitee.com/flycash/notification-platform/internal/test/ioc"
)

// Injectors from wire.go:

func InitTxNotificationService(configSvc config.BusinessConfigService, sender2 sender.NotificationSender) *App {
	v := ioc.InitDBAndTables()
	txNotificationDAO := dao.NewTxNotificationDAO(v)
	txNotificationRepository := repository.NewTxNotificationRepository(txNotificationDAO)
	notificationDAO := dao.NewNotificationDAO(v)
	cmdable := ioc.InitRedis()
	quotaCache := redis.NewQuotaCache(cmdable)
	notificationRepository := repository.NewNotificationRepository(notificationDAO, quotaCache)
	client := ioc.InitRedisClient()
	dlockClient := ioc.InitDistributedLock(client)
	txNotificationService := notification.NewTxNotificationService(txNotificationRepository, configSvc, notificationRepository, dlockClient, sender2)
	txCheckTask := notification.NewTask(txNotificationRepository, configSvc, dlockClient)
	app := &App{
		Svc:  txNotificationService,
		Task: txCheckTask,
	}
	return app
}

// wire.go:

type App struct {
	Svc  notification.TxNotificationService
	Task *notification.TxCheckTask
}
