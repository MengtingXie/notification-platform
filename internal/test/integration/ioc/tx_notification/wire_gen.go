// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package tx_notification

import (
	"gitee.com/flycash/notification-platform/internal/repository"
	"gitee.com/flycash/notification-platform/internal/repository/dao"
	"gitee.com/flycash/notification-platform/internal/service/config"
	"gitee.com/flycash/notification-platform/internal/service/notification"
	"gitee.com/flycash/notification-platform/internal/test/ioc"
	"github.com/meoying/dlock-go"
	redis2 "github.com/meoying/dlock-go/redis"
	"github.com/redis/go-redis/v9"
)

// Injectors from wire.go:

func InitTxNotificationService(configSvc config.BusinessConfigService) *App {
	db := ioc.InitDB()
	txNotificationDAO := dao.NewTxNotificationDAO(db)
	txNotificationRepository := repository.NewTxNotificationRepository(txNotificationDAO)
	notificationDAO := dao.NewNotificationDAO(db)
	notificationRepository := repository.NewNotificationRepository(notificationDAO)
	cmdable := ioc.InitRedis()
	client := initRedisClient(cmdable)
	txNotificationService := notification.NewTxNotificationService(txNotificationRepository, configSvc, notificationRepository, client)
	txCheckTask := notification.NewTask(txNotificationRepository, configSvc, client)
	app := &App{
		Svc:  txNotificationService,
		Task: txCheckTask,
	}
	return app
}

// wire.go:

type App struct {
	Svc  notification.TxNotificationService
	Task *notification.TxCheckTask
}

func initRedisClient(rdb redis.Cmdable) dlock.Client {
	return redis2.NewClient(rdb)
}
